

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Feb 07 20:16:18 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    21                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 21/07/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F67K40 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     _CM1CON1bits	set	3793
    62   000000                     _LATG	set	3967
    63   000000                     _LATFbits	set	3966
    64   000000                     _LATHbits	set	3968
    65   000000                     _LATBbits	set	3962
    66   000000                     _LATAbits	set	3961
    67   000000                     _LATGbits	set	3967
    68   000000                     _IPR0bits	set	3615
    69   000000                     _PIE0bits	set	3625
    70   000000                     _LATEbits	set	3965
    71   000000                     _TRISEbits	set	3973
    72   000000                     _TRISFbits	set	3974
    73   000000                     _TRISB	set	3970
    74   000000                     _TRISA	set	3969
    75   000000                     _TMR0L	set	4051
    76   000000                     _TMR0H	set	4052
    77   000000                     _T0CON0bits	set	4053
    78   000000                     _T0CON1bits	set	4054
    79   000000                     _INTCONbits	set	4082
    80   000000                     _PIE2bits	set	3627
    81   000000                     _PIR0bits	set	3635
    82   000000                     _PIR2bits	set	3637
    83   000000                     _ANSELFbits	set	3764
    84   000000                     _LATA	set	3961
    85   000000                     _IPR2bits	set	3617
    86   000000                     _LATB	set	3962
    87   000000                     _TRISHbits	set	3976
    88   000000                     _TRISG	set	3975
    89   000000                     _DAC1CON0bits	set	3782
    90   000000                     _CM1CON0bits	set	3792
    91   000000                     _CM1NCHbits	set	3794
    92   000000                     _DAC1CON1bits	set	3783
    93   000000                     _CM1PCHbits	set	3795
    94                           
    95                           ; #config settings
    96                           
    97                           	psect	cinit
    98   001582                     __pcinit:
    99                           	callstack 0
   100   001582                     start_initialization:
   101                           	callstack 0
   102   001582                     __initialization:
   103                           	callstack 0
   104                           
   105                           ; Clear objects allocated to COMRAM (4 bytes)
   106   001582  6A48               	clrf	(__pbssCOMRAM+3)& (0+255),c
   107   001584  6A47               	clrf	(__pbssCOMRAM+2)& (0+255),c
   108   001586  6A46               	clrf	(__pbssCOMRAM+1)& (0+255),c
   109   001588  6A45               	clrf	__pbssCOMRAM& (0+255),c
   110   00158A                     end_of_initialization:
   111                           	callstack 0
   112   00158A                     __end_of__initialization:
   113                           	callstack 0
   114   00158A  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   115   00158C  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   116   00158E  0100               	movlb	0
   117   001590  EF01  F007         	goto	_main	;jump to C main() function
   118                           
   119                           	psect	bssCOMRAM
   120   000045                     __pbssCOMRAM:
   121                           	callstack 0
   122   000045                     calc_max_PPM@loopCounter:
   123                           	callstack 0
   124   000045                     	ds	4
   125                           
   126                           	psect	cstackCOMRAM
   127   000001                     __pcstackCOMRAM:
   128                           	callstack 0
   129   000001                     ??_HighISR:
   130   000001                     
   131                           ; 1 bytes @ 0x0
   132   000001                     	ds	1
   133   000002                     ??_LowISR:
   134                           
   135                           ; 1 bytes @ 0x1
   136   000002                     	ds	3
   137   000005                     ?___lwdiv:
   138                           	callstack 0
   139   000005                     ?___lwmod:
   140                           	callstack 0
   141   000005                     LEDarray_disp_bin@number:
   142                           	callstack 0
   143   000005                     ___lwdiv@dividend:
   144                           	callstack 0
   145   000005                     ___lwmod@dividend:
   146                           	callstack 0
   147                           
   148                           ; 2 bytes @ 0x4
   149   000005                     	ds	2
   150   000007                     ___lwdiv@divisor:
   151                           	callstack 0
   152   000007                     ___lwmod@divisor:
   153                           	callstack 0
   154                           
   155                           ; 2 bytes @ 0x6
   156   000007                     	ds	2
   157   000009                     ___lwmod@counter:
   158                           	callstack 0
   159   000009                     ___lwdiv@quotient:
   160                           	callstack 0
   161                           
   162                           ; 2 bytes @ 0x8
   163   000009                     	ds	1
   164   00000A                     ?_isLeapYear:
   165                           	callstack 0
   166   00000A                     isLeapYear@year:
   167                           	callstack 0
   168                           
   169                           ; 2 bytes @ 0x9
   170   00000A                     	ds	1
   171   00000B                     ___lwdiv@counter:
   172                           	callstack 0
   173                           
   174                           ; 1 bytes @ 0xA
   175   00000B                     	ds	1
   176   00000C                     ??_isLeapYear:
   177                           
   178                           ; 1 bytes @ 0xB
   179   00000C                     	ds	2
   180   00000E                     _isLeapYear$1139:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0xD
   184   00000E                     	ds	1
   185   00000F                     ?_calculateDayOfDSTStart:
   186                           	callstack 0
   187   00000F                     ?_calculateDayOfDSTEnd:
   188                           	callstack 0
   189   00000F                     calculateDayOfDSTStart@year:
   190                           	callstack 0
   191   00000F                     calculateDayOfDSTEnd@year:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0xE
   195   00000F                     	ds	2
   196   000011                     ??_calculateDayOfDSTStart:
   197   000011                     ??_calculateDayOfDSTEnd:
   198                           
   199                           ; 1 bytes @ 0x10
   200   000011                     	ds	10
   201   00001B                     calculateDayOfDSTStart@leapYear:
   202                           	callstack 0
   203   00001B                     calculateDayOfDSTEnd@leapYear:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x1A
   207   00001B                     	ds	2
   208   00001D                     calculateDayOfDSTStart@daysBeforeMarch:
   209                           	callstack 0
   210   00001D                     calculateDayOfDSTEnd@daysBeforeOctober:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x1C
   214   00001D                     	ds	2
   215   00001F                     calculateDayOfDSTStart@h:
   216                           	callstack 0
   217   00001F                     calculateDayOfDSTEnd@h:
   218                           	callstack 0
   219                           
   220                           ; 2 bytes @ 0x1E
   221   00001F                     	ds	2
   222   000021                     calculateDayOfDSTStart@dayOfWeekMarch1st:
   223                           	callstack 0
   224   000021                     calculateDayOfDSTEnd@dayOfWeekOctober1st:
   225                           	callstack 0
   226                           
   227                           ; 2 bytes @ 0x20
   228   000021                     	ds	2
   229   000023                     calculateDayOfDSTStart@dayOfWeekMarch31st:
   230                           	callstack 0
   231   000023                     calculateDayOfDSTEnd@dayOfWeekOctober31st:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0x22
   235   000023                     	ds	2
   236   000025                     calculateDayOfDSTStart@lastSundayDateMarch:
   237                           	callstack 0
   238   000025                     calculateDayOfDSTEnd@lastSundayDateOctober:
   239                           	callstack 0
   240                           
   241                           ; 2 bytes @ 0x24
   242   000025                     	ds	2
   243   000027                     calculateDayOfDSTStart@dayOfYearForDSTStart:
   244                           	callstack 0
   245   000027                     calculateDayOfDSTEnd@dayOfYearForDSTEnd:
   246                           	callstack 0
   247                           
   248                           ; 2 bytes @ 0x26
   249   000027                     	ds	2
   250   000029                     _calculateDayOfDSTStart$1144:
   251                           	callstack 0
   252   000029                     _calculateDayOfDSTEnd$1156:
   253                           	callstack 0
   254                           
   255                           ; 2 bytes @ 0x28
   256   000029                     	ds	2
   257   00002B                     calculateDayOfDSTStart@K:
   258                           	callstack 0
   259   00002B                     calculateDayOfDSTEnd@K:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x2A
   263   00002B                     	ds	2
   264   00002D                     calculateDayOfDSTStart@J:
   265                           	callstack 0
   266   00002D                     calculateDayOfDSTEnd@J:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0x2C
   270   00002D                     	ds	2
   271   00002F                     main@daylight_savings:
   272                           	callstack 0
   273                           
   274                           ; 2 bytes @ 0x2E
   275   00002F                     	ds	2
   276   000031                     main@light_start:
   277                           	callstack 0
   278                           
   279                           ; 2 bytes @ 0x30
   280   000031                     	ds	2
   281   000033                     main@light_end:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x32
   285   000033                     	ds	2
   286   000035                     main@leap:
   287                           	callstack 0
   288                           
   289                           ; 2 bytes @ 0x34
   290   000035                     	ds	2
   291   000037                     main@fwd_daylight_savings_day:
   292                           	callstack 0
   293                           
   294                           ; 2 bytes @ 0x36
   295   000037                     	ds	2
   296   000039                     main@bkwd_daylight_savings_day:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x38
   300   000039                     	ds	2
   301   00003B                     main@light_state:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0x3A
   305   00003B                     	ds	2
   306   00003D                     main@backward_zone:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x3C
   310   00003D                     	ds	2
   311   00003F                     main@year:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0x3E
   315   00003F                     	ds	2
   316   000041                     main@day:
   317                           	callstack 0
   318                           
   319                           ; 2 bytes @ 0x40
   320   000041                     	ds	2
   321   000043                     main@hour:
   322                           	callstack 0
   323                           
   324                           ; 2 bytes @ 0x42
   325   000043                     	ds	2
   326                           
   327 ;;
   328 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   329 ;;
   330 ;; *************** function _main *****************
   331 ;; Defined at:
   332 ;;		line 17 in file "main.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;		None
   335 ;; Auto vars:     Size  Location     Type
   336 ;;  hour            2   66[COMRAM] unsigned int 
   337 ;;  day             2   64[COMRAM] unsigned int 
   338 ;;  year            2   62[COMRAM] unsigned int 
   339 ;;  backward_zon    2   60[COMRAM] unsigned int 
   340 ;;  light_state     2   58[COMRAM] unsigned int 
   341 ;;  bkwd_dayligh    2   56[COMRAM] unsigned int 
   342 ;;  fwd_daylight    2   54[COMRAM] unsigned int 
   343 ;;  leap            2   52[COMRAM] unsigned int 
   344 ;;  light_end       2   50[COMRAM] unsigned int 
   345 ;;  light_start     2   48[COMRAM] unsigned int 
   346 ;;  daylight_sav    2   46[COMRAM] unsigned int 
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, status,2, status,0, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : 0/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   357 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   359 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   360 ;;Total ram usage:       22 bytes
   361 ;; Hardware stack levels required when called: 5
   362 ;; This function calls:
   363 ;;		_Interrupts_init
   364 ;;		_LEDarray_disp_bin
   365 ;;		_LEDarray_init
   366 ;;		_Timer0_init
   367 ;;		_calculateDayOfDSTEnd
   368 ;;		_calculateDayOfDSTStart
   369 ;;		_isLeapYear
   370 ;; This function is called by:
   371 ;;		Startup code after reset
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           	psect	text0
   376   000E02                     __ptext0:
   377                           	callstack 0
   378   000E02                     _main:
   379                           	callstack 26
   380   000E02                     
   381                           ;main.c: 20:     unsigned int daylight_savings = 0;
   382   000E02  0E00               	movlw	0
   383   000E04  6E30               	movwf	(main@daylight_savings+1)^0,c
   384   000E06  0E00               	movlw	0
   385   000E08  6E2F               	movwf	main@daylight_savings^0,c
   386                           
   387                           ;main.c: 21:     unsigned int light_start = 1;
   388   000E0A  0E00               	movlw	0
   389   000E0C  6E32               	movwf	(main@light_start+1)^0,c
   390   000E0E  0E01               	movlw	1
   391   000E10  6E31               	movwf	main@light_start^0,c
   392                           
   393                           ;main.c: 22:     unsigned int light_end = 5;
   394   000E12  0E00               	movlw	0
   395   000E14  6E34               	movwf	(main@light_end+1)^0,c
   396   000E16  0E05               	movlw	5
   397   000E18  6E33               	movwf	main@light_end^0,c
   398                           
   399                           ;main.c: 23:     unsigned int hour = 0;
   400   000E1A  0E00               	movlw	0
   401   000E1C  6E44               	movwf	(main@hour+1)^0,c
   402   000E1E  0E00               	movlw	0
   403   000E20  6E43               	movwf	main@hour^0,c
   404                           
   405                           ;main.c: 24:     unsigned int day = 0;
   406   000E22  0E00               	movlw	0
   407   000E24  6E42               	movwf	(main@day+1)^0,c
   408   000E26  0E00               	movlw	0
   409   000E28  6E41               	movwf	main@day^0,c
   410                           
   411                           ;main.c: 25:     unsigned int year = 2024;
   412   000E2A  0E07               	movlw	7
   413   000E2C  6E40               	movwf	(main@year+1)^0,c
   414   000E2E  0EE8               	movlw	232
   415   000E30  6E3F               	movwf	main@year^0,c
   416                           
   417                           ;main.c: 26:     unsigned int leap;;main.c: 27:     unsigned int fwd_daylight_savings_da
      +                          y;;main.c: 28:     unsigned int bkwd_daylight_savings_day;;main.c: 29:     unsigned int 
      +                          backward_zone = 0;
   418   000E32  0E00               	movlw	0
   419   000E34  6E3E               	movwf	(main@backward_zone+1)^0,c
   420   000E36  0E00               	movlw	0
   421   000E38  6E3D               	movwf	main@backward_zone^0,c
   422   000E3A                     
   423                           ;main.c: 32:     Interrupts_init();
   424   000E3A  ECCA  F00A         	call	_Interrupts_init	;wreg free
   425                           
   426                           ;main.c: 33:     Timer0_init();
   427   000E3E  EC94  F00A         	call	_Timer0_init	;wreg free
   428                           
   429                           ;main.c: 34:     LEDarray_init();
   430   000E42  ECAB  F00A         	call	_LEDarray_init	;wreg free
   431   000E46                     l1406:
   432                           
   433                           ;main.c: 38:         if (LATEbits.LATE2 == 1){
   434   000E46  A47D               	btfss	125,2,c	;volatile
   435   000E48  EF28  F007         	goto	u691
   436   000E4C  EF2A  F007         	goto	u690
   437   000E50                     u691:
   438   000E50  EF2D  F007         	goto	l1412
   439   000E54                     u690:
   440   000E54                     
   441                           ;main.c: 39:             hour++;
   442   000E54  4A43               	infsnz	main@hour^0,f,c
   443   000E56  2A44               	incf	(main@hour+1)^0,f,c
   444   000E58                     
   445                           ;main.c: 40:             LATEbits.LATE2 = 0;
   446   000E58  947D               	bcf	125,2,c	;volatile
   447   000E5A                     l1412:
   448                           
   449                           ;main.c: 42:         LEDarray_disp_bin(hour);
   450   000E5A  C043  F005         	movff	main@hour,LEDarray_disp_bin@number
   451   000E5E  C044  F006         	movff	main@hour+1,LEDarray_disp_bin@number+1
   452   000E62  EC69  F009         	call	_LEDarray_disp_bin	;wreg free
   453   000E66                     
   454                           ;main.c: 49:         if (day==0 && hour == 0){
   455   000E66  5041               	movf	main@day^0,w,c
   456   000E68  1042               	iorwf	(main@day+1)^0,w,c
   457   000E6A  A4D8               	btfss	status,2,c
   458   000E6C  EF3A  F007         	goto	u701
   459   000E70  EF3C  F007         	goto	u700
   460   000E74                     u701:
   461   000E74  EF59  F007         	goto	l1420
   462   000E78                     u700:
   463   000E78  5043               	movf	main@hour^0,w,c
   464   000E7A  1044               	iorwf	(main@hour+1)^0,w,c
   465   000E7C  A4D8               	btfss	status,2,c
   466   000E7E  EF43  F007         	goto	u711
   467   000E82  EF45  F007         	goto	u710
   468   000E86                     u711:
   469   000E86  EF59  F007         	goto	l1420
   470   000E8A                     u710:
   471   000E8A                     
   472                           ;main.c: 50:             fwd_daylight_savings_day = calculateDayOfDSTStart(year);
   473   000E8A  C03F  F00F         	movff	main@year,calculateDayOfDSTStart@year
   474   000E8E  C040  F010         	movff	main@year+1,calculateDayOfDSTStart@year+1
   475   000E92  EC0F  F008         	call	_calculateDayOfDSTStart	;wreg free
   476   000E96  C00F  F037         	movff	?_calculateDayOfDSTStart,main@fwd_daylight_savings_day
   477   000E9A  C010  F038         	movff	?_calculateDayOfDSTStart+1,main@fwd_daylight_savings_day+1
   478                           
   479                           ;main.c: 51:             bkwd_daylight_savings_day = calculateDayOfDSTEnd(year);
   480   000E9E  C03F  F00F         	movff	main@year,calculateDayOfDSTEnd@year
   481   000EA2  C040  F010         	movff	main@year+1,calculateDayOfDSTEnd@year+1
   482   000EA6  ECBC  F008         	call	_calculateDayOfDSTEnd	;wreg free
   483   000EAA  C00F  F039         	movff	?_calculateDayOfDSTEnd,main@bkwd_daylight_savings_day
   484   000EAE  C010  F03A         	movff	?_calculateDayOfDSTEnd+1,main@bkwd_daylight_savings_day+1
   485   000EB2                     l1420:
   486                           
   487                           ;main.c: 54:         if (day==fwd_daylight_savings_day && hour==2){
   488   000EB2  5037               	movf	main@fwd_daylight_savings_day^0,w,c
   489   000EB4  1841               	xorwf	main@day^0,w,c
   490   000EB6  E107               	bnz	u721
   491   000EB8  5038               	movf	(main@fwd_daylight_savings_day+1)^0,w,c
   492   000EBA  1842               	xorwf	(main@day+1)^0,w,c
   493   000EBC  A4D8               	btfss	status,2,c
   494   000EBE  EF63  F007         	goto	u721
   495   000EC2  EF65  F007         	goto	u720
   496   000EC6                     u721:
   497   000EC6  EF75  F007         	goto	l1428
   498   000ECA                     u720:
   499   000ECA  0E02               	movlw	2
   500   000ECC  1843               	xorwf	main@hour^0,w,c
   501   000ECE  1044               	iorwf	(main@hour+1)^0,w,c
   502   000ED0  A4D8               	btfss	status,2,c
   503   000ED2  EF6D  F007         	goto	u731
   504   000ED6  EF6F  F007         	goto	u730
   505   000EDA                     u731:
   506   000EDA  EF75  F007         	goto	l1428
   507   000EDE                     u730:
   508   000EDE                     
   509                           ;main.c: 55:             hour++;
   510   000EDE  4A43               	infsnz	main@hour^0,f,c
   511   000EE0  2A44               	incf	(main@hour+1)^0,f,c
   512   000EE2                     
   513                           ;main.c: 56:             backward_zone = 0;
   514   000EE2  0E00               	movlw	0
   515   000EE4  6E3E               	movwf	(main@backward_zone+1)^0,c
   516   000EE6  0E00               	movlw	0
   517   000EE8  6E3D               	movwf	main@backward_zone^0,c
   518   000EEA                     l1428:
   519                           
   520                           ;main.c: 60:         if (day==bkwd_daylight_savings_day && hour==2 && backward_zone == 0
      +                          ){
   521   000EEA  5039               	movf	main@bkwd_daylight_savings_day^0,w,c
   522   000EEC  1841               	xorwf	main@day^0,w,c
   523   000EEE  E107               	bnz	u741
   524   000EF0  503A               	movf	(main@bkwd_daylight_savings_day+1)^0,w,c
   525   000EF2  1842               	xorwf	(main@day+1)^0,w,c
   526   000EF4  A4D8               	btfss	status,2,c
   527   000EF6  EF7F  F007         	goto	u741
   528   000EFA  EF81  F007         	goto	u740
   529   000EFE                     u741:
   530   000EFE  EF9B  F007         	goto	l1438
   531   000F02                     u740:
   532   000F02  0E02               	movlw	2
   533   000F04  1843               	xorwf	main@hour^0,w,c
   534   000F06  1044               	iorwf	(main@hour+1)^0,w,c
   535   000F08  A4D8               	btfss	status,2,c
   536   000F0A  EF89  F007         	goto	u751
   537   000F0E  EF8B  F007         	goto	u750
   538   000F12                     u751:
   539   000F12  EF9B  F007         	goto	l1438
   540   000F16                     u750:
   541   000F16  503D               	movf	main@backward_zone^0,w,c
   542   000F18  103E               	iorwf	(main@backward_zone+1)^0,w,c
   543   000F1A  A4D8               	btfss	status,2,c
   544   000F1C  EF92  F007         	goto	u761
   545   000F20  EF94  F007         	goto	u760
   546   000F24                     u761:
   547   000F24  EF9B  F007         	goto	l1438
   548   000F28                     u760:
   549   000F28                     
   550                           ;main.c: 61:             hour--;
   551   000F28  0643               	decf	main@hour^0,f,c
   552   000F2A  A0D8               	btfss	status,0,c
   553   000F2C  0644               	decf	(main@hour+1)^0,f,c
   554   000F2E                     
   555                           ;main.c: 62:             backward_zone = 1;
   556   000F2E  0E00               	movlw	0
   557   000F30  6E3E               	movwf	(main@backward_zone+1)^0,c
   558   000F32  0E01               	movlw	1
   559   000F34  6E3D               	movwf	main@backward_zone^0,c
   560   000F36                     l1438:
   561                           
   562                           ;main.c: 68:         if (hour >= 1 && hour <= 5){
   563   000F36  5043               	movf	main@hour^0,w,c
   564   000F38  1044               	iorwf	(main@hour+1)^0,w,c
   565   000F3A  B4D8               	btfsc	status,2,c
   566   000F3C  EFA2  F007         	goto	u771
   567   000F40  EFA4  F007         	goto	u770
   568   000F44                     u771:
   569   000F44  EFB5  F007         	goto	l1444
   570   000F48                     u770:
   571   000F48  5044               	movf	(main@hour+1)^0,w,c
   572   000F4A  E107               	bnz	u781
   573   000F4C  0E06               	movlw	6
   574   000F4E  5C43               	subwf	main@hour^0,w,c
   575   000F50  B0D8               	btfsc	status,0,c
   576   000F52  EFAD  F007         	goto	u781
   577   000F56  EFAF  F007         	goto	u780
   578   000F5A                     u781:
   579   000F5A  EFB5  F007         	goto	l1444
   580   000F5E                     u780:
   581   000F5E                     
   582                           ;main.c: 69:             light_state = 1;
   583   000F5E  0E00               	movlw	0
   584   000F60  6E3C               	movwf	(main@light_state+1)^0,c
   585   000F62  0E01               	movlw	1
   586   000F64  6E3B               	movwf	main@light_state^0,c
   587                           
   588                           ;main.c: 70:         } else {
   589   000F66  EFB9  F007         	goto	l1446
   590   000F6A                     l1444:
   591                           
   592                           ;main.c: 71:             light_state = 0;
   593   000F6A  0E00               	movlw	0
   594   000F6C  6E3C               	movwf	(main@light_state+1)^0,c
   595   000F6E  0E00               	movlw	0
   596   000F70  6E3B               	movwf	main@light_state^0,c
   597   000F72                     l1446:
   598                           
   599                           ;main.c: 74:         if (light_state == 1){
   600   000F72  043B               	decf	main@light_state^0,w,c
   601   000F74  103C               	iorwf	(main@light_state+1)^0,w,c
   602   000F76  A4D8               	btfss	status,2,c
   603   000F78  EFC0  F007         	goto	u791
   604   000F7C  EFC2  F007         	goto	u790
   605   000F80                     u791:
   606   000F80  EFC5  F007         	goto	l30
   607   000F84                     u790:
   608   000F84                     
   609                           ;main.c: 75:             LATHbits.LATH3 = 1;
   610   000F84  8680               	bsf	128,3,c	;volatile
   611                           
   612                           ;main.c: 76:         } else {
   613   000F86  EFC6  F007         	goto	l1450
   614   000F8A                     l30:
   615                           
   616                           ;main.c: 77:             LATHbits.LATH3 = 0;
   617   000F8A  9680               	bcf	128,3,c	;volatile
   618   000F8C                     l1450:
   619                           
   620                           ;main.c: 83:         if (hour == 24) {
   621   000F8C  0E18               	movlw	24
   622   000F8E  1843               	xorwf	main@hour^0,w,c
   623   000F90  1044               	iorwf	(main@hour+1)^0,w,c
   624   000F92  A4D8               	btfss	status,2,c
   625   000F94  EFCE  F007         	goto	u801
   626   000F98  EFD0  F007         	goto	u800
   627   000F9C                     u801:
   628   000F9C  EFD6  F007         	goto	l1456
   629   000FA0                     u800:
   630   000FA0                     
   631                           ;main.c: 84:            hour = 0;
   632   000FA0  0E00               	movlw	0
   633   000FA2  6E44               	movwf	(main@hour+1)^0,c
   634   000FA4  0E00               	movlw	0
   635   000FA6  6E43               	movwf	main@hour^0,c
   636   000FA8                     
   637                           ;main.c: 85:            day++;
   638   000FA8  4A41               	infsnz	main@day^0,f,c
   639   000FAA  2A42               	incf	(main@day+1)^0,f,c
   640   000FAC                     l1456:
   641                           
   642                           ;main.c: 87:         if (day == 365){
   643   000FAC  0E6D               	movlw	109
   644   000FAE  1841               	xorwf	main@day^0,w,c
   645   000FB0  E106               	bnz	u811
   646   000FB2  0442               	decf	(main@day+1)^0,w,c
   647   000FB4  A4D8               	btfss	status,2,c
   648   000FB6  EFDF  F007         	goto	u811
   649   000FBA  EFE1  F007         	goto	u810
   650   000FBE                     u811:
   651   000FBE  EFFA  F007         	goto	l1466
   652   000FC2                     u810:
   653   000FC2                     
   654                           ;main.c: 88:             leap = isLeapYear(year);
   655   000FC2  C03F  F00A         	movff	main@year,isLeapYear@year
   656   000FC6  C040  F00B         	movff	main@year+1,isLeapYear@year+1
   657   000FCA  ECCD  F009         	call	_isLeapYear	;wreg free
   658   000FCE  C00A  F035         	movff	?_isLeapYear,main@leap
   659   000FD2  C00B  F036         	movff	?_isLeapYear+1,main@leap+1
   660   000FD6                     
   661                           ;main.c: 89:             if (leap == 0){
   662   000FD6  5035               	movf	main@leap^0,w,c
   663   000FD8  1036               	iorwf	(main@leap+1)^0,w,c
   664   000FDA  A4D8               	btfss	status,2,c
   665   000FDC  EFF2  F007         	goto	u821
   666   000FE0  EFF4  F007         	goto	u820
   667   000FE4                     u821:
   668   000FE4  EFFA  F007         	goto	l1466
   669   000FE8                     u820:
   670   000FE8                     
   671                           ;main.c: 90:                 day=0;
   672   000FE8  0E00               	movlw	0
   673   000FEA  6E42               	movwf	(main@day+1)^0,c
   674   000FEC  0E00               	movlw	0
   675   000FEE  6E41               	movwf	main@day^0,c
   676   000FF0                     
   677                           ;main.c: 91:                 year++;
   678   000FF0  4A3F               	infsnz	main@year^0,f,c
   679   000FF2  2A40               	incf	(main@year+1)^0,f,c
   680   000FF4                     l1466:
   681                           
   682                           ;main.c: 95:         if (day == 366){
   683   000FF4  0E6E               	movlw	110
   684   000FF6  1841               	xorwf	main@day^0,w,c
   685   000FF8  E106               	bnz	u831
   686   000FFA  0442               	decf	(main@day+1)^0,w,c
   687   000FFC  A4D8               	btfss	status,2,c
   688   000FFE  EF03  F008         	goto	u831
   689   001002  EF05  F008         	goto	u830
   690   001006                     u831:
   691   001006  EF23  F007         	goto	l1406
   692   00100A                     u830:
   693   00100A                     
   694                           ;main.c: 96:             day = 0;
   695   00100A  0E00               	movlw	0
   696   00100C  6E42               	movwf	(main@day+1)^0,c
   697   00100E  0E00               	movlw	0
   698   001010  6E41               	movwf	main@day^0,c
   699   001012                     
   700                           ;main.c: 97:             year++;
   701   001012  4A3F               	infsnz	main@year^0,f,c
   702   001014  2A40               	incf	(main@year+1)^0,f,c
   703   001016  EF23  F007         	goto	l1406
   704   00101A  EF29  F000         	goto	start
   705   00101E                     __end_of_main:
   706                           	callstack 0
   707                           
   708 ;; *************** function _calculateDayOfDSTStart *****************
   709 ;; Defined at:
   710 ;;		line 11 in file "date_finders.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;  year            2   14[COMRAM] unsigned int 
   713 ;; Auto vars:     Size  Location     Type
   714 ;;  J               2   44[COMRAM] unsigned int 
   715 ;;  K               2   42[COMRAM] unsigned int 
   716 ;;  dayOfYearFor    2   38[COMRAM] unsigned int 
   717 ;;  lastSundayDa    2   36[COMRAM] unsigned int 
   718 ;;  dayOfWeekMar    2   34[COMRAM] unsigned int 
   719 ;;  dayOfWeekMar    2   32[COMRAM] unsigned int 
   720 ;;  h               2   30[COMRAM] unsigned int 
   721 ;;  daysBeforeMa    2   28[COMRAM] unsigned int 
   722 ;;  leapYear        2   26[COMRAM] unsigned int 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  2   14[COMRAM] unsigned int 
   725 ;; Registers used:
   726 ;;		wreg, status,2, status,0, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   733 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   734 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   735 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   736 ;;Total ram usage:       32 bytes
   737 ;; Hardware stack levels used: 1
   738 ;; Hardware stack levels required when called: 4
   739 ;; This function calls:
   740 ;;		___lwdiv
   741 ;;		___lwmod
   742 ;;		_isLeapYear
   743 ;; This function is called by:
   744 ;;		_main
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           	psect	text1
   749   00101E                     __ptext1:
   750                           	callstack 0
   751   00101E                     _calculateDayOfDSTStart:
   752                           	callstack 26
   753   00101E                     
   754                           ;date_finders.c: 12:     unsigned int leapYear = isLeapYear(year);
   755   00101E  C00F  F00A         	movff	calculateDayOfDSTStart@year,isLeapYear@year
   756   001022  C010  F00B         	movff	calculateDayOfDSTStart@year+1,isLeapYear@year+1
   757   001026  ECCD  F009         	call	_isLeapYear	;wreg free
   758   00102A  C00A  F01B         	movff	?_isLeapYear,calculateDayOfDSTStart@leapYear
   759   00102E  C00B  F01C         	movff	?_isLeapYear+1,calculateDayOfDSTStart@leapYear+1
   760   001032                     
   761                           ;date_finders.c: 14:     unsigned int daysBeforeMarch = 31 + (leapYear ? 29 : 28);
   762   001032  501B               	movf	calculateDayOfDSTStart@leapYear^0,w,c
   763   001034  101C               	iorwf	(calculateDayOfDSTStart@leapYear+1)^0,w,c
   764   001036  A4D8               	btfss	status,2,c
   765   001038  EF20  F008         	goto	u671
   766   00103C  EF22  F008         	goto	u670
   767   001040                     u671:
   768   001040  EF28  F008         	goto	l1352
   769   001044                     u670:
   770   001044  0E00               	movlw	0
   771   001046  6E2A               	movwf	(_calculateDayOfDSTStart$1144+1)^0,c
   772   001048  0E1C               	movlw	28
   773   00104A  6E29               	movwf	_calculateDayOfDSTStart$1144^0,c
   774   00104C  EF2C  F008         	goto	l1354
   775   001050                     l1352:
   776   001050  0E00               	movlw	0
   777   001052  6E2A               	movwf	(_calculateDayOfDSTStart$1144+1)^0,c
   778   001054  0E1D               	movlw	29
   779   001056  6E29               	movwf	_calculateDayOfDSTStart$1144^0,c
   780   001058                     l1354:
   781   001058  0E1F               	movlw	31
   782   00105A  2429               	addwf	_calculateDayOfDSTStart$1144^0,w,c
   783   00105C  6E1D               	movwf	calculateDayOfDSTStart@daysBeforeMarch^0,c
   784   00105E  0E00               	movlw	0
   785   001060  202A               	addwfc	(_calculateDayOfDSTStart$1144+1)^0,w,c
   786   001062  6E1E               	movwf	(calculateDayOfDSTStart@daysBeforeMarch+1)^0,c
   787   001064                     
   788                           ;date_finders.c: 17:     unsigned int K = year % 100;
   789   001064  C00F  F005         	movff	calculateDayOfDSTStart@year,___lwmod@dividend
   790   001068  C010  F006         	movff	calculateDayOfDSTStart@year+1,___lwmod@dividend+1
   791   00106C  0E00               	movlw	0
   792   00106E  6E08               	movwf	(___lwmod@divisor+1)^0,c
   793   001070  0E64               	movlw	100
   794   001072  6E07               	movwf	___lwmod@divisor^0,c
   795   001074  EC44  F00A         	call	___lwmod	;wreg free
   796   001078  C005  F02B         	movff	?___lwmod,calculateDayOfDSTStart@K
   797   00107C  C006  F02C         	movff	?___lwmod+1,calculateDayOfDSTStart@K+1
   798   001080                     
   799                           ;date_finders.c: 18:     unsigned int J = year / 100;
   800   001080  C00F  F005         	movff	calculateDayOfDSTStart@year,___lwdiv@dividend
   801   001084  C010  F006         	movff	calculateDayOfDSTStart@year+1,___lwdiv@dividend+1
   802   001088  0E00               	movlw	0
   803   00108A  6E08               	movwf	(___lwdiv@divisor+1)^0,c
   804   00108C  0E64               	movlw	100
   805   00108E  6E07               	movwf	___lwdiv@divisor^0,c
   806   001090  EC0A  F00A         	call	___lwdiv	;wreg free
   807   001094  C005  F02D         	movff	?___lwdiv,calculateDayOfDSTStart@J
   808   001098  C006  F02E         	movff	?___lwdiv+1,calculateDayOfDSTStart@J+1
   809   00109C                     
   810                           ;date_finders.c: 20:     unsigned int h = (1 + ((13 * (3 + 1)) / 5) + K + (K / 4) + (J /
      +                           4) - 2 * J) % 7;
   811   00109C  C02D  F011         	movff	calculateDayOfDSTStart@J,??_calculateDayOfDSTStart
   812   0010A0  C02E  F012         	movff	calculateDayOfDSTStart@J+1,??_calculateDayOfDSTStart+1
   813   0010A4  90D8               	bcf	status,0,c
   814   0010A6  3611               	rlcf	??_calculateDayOfDSTStart^0,f,c
   815   0010A8  3612               	rlcf	(??_calculateDayOfDSTStart+1)^0,f,c
   816   0010AA  C02D  F013         	movff	calculateDayOfDSTStart@J,??_calculateDayOfDSTStart+2
   817   0010AE  C02E  F014         	movff	calculateDayOfDSTStart@J+1,??_calculateDayOfDSTStart+3
   818   0010B2  90D8               	bcf	status,0,c
   819   0010B4  3214               	rrcf	(??_calculateDayOfDSTStart+3)^0,f,c
   820   0010B6  3213               	rrcf	(??_calculateDayOfDSTStart+2)^0,f,c
   821   0010B8  90D8               	bcf	status,0,c
   822   0010BA  3214               	rrcf	(??_calculateDayOfDSTStart+3)^0,f,c
   823   0010BC  3213               	rrcf	(??_calculateDayOfDSTStart+2)^0,f,c
   824   0010BE  C02B  F015         	movff	calculateDayOfDSTStart@K,??_calculateDayOfDSTStart+4
   825   0010C2  C02C  F016         	movff	calculateDayOfDSTStart@K+1,??_calculateDayOfDSTStart+5
   826   0010C6  90D8               	bcf	status,0,c
   827   0010C8  3216               	rrcf	(??_calculateDayOfDSTStart+5)^0,f,c
   828   0010CA  3215               	rrcf	(??_calculateDayOfDSTStart+4)^0,f,c
   829   0010CC  90D8               	bcf	status,0,c
   830   0010CE  3216               	rrcf	(??_calculateDayOfDSTStart+5)^0,f,c
   831   0010D0  3215               	rrcf	(??_calculateDayOfDSTStart+4)^0,f,c
   832   0010D2  5013               	movf	(??_calculateDayOfDSTStart+2)^0,w,c
   833   0010D4  2415               	addwf	(??_calculateDayOfDSTStart+4)^0,w,c
   834   0010D6  6E17               	movwf	(??_calculateDayOfDSTStart+6)^0,c
   835   0010D8  5014               	movf	(??_calculateDayOfDSTStart+3)^0,w,c
   836   0010DA  2016               	addwfc	(??_calculateDayOfDSTStart+5)^0,w,c
   837   0010DC  6E18               	movwf	(??_calculateDayOfDSTStart+7)^0,c
   838   0010DE  5011               	movf	??_calculateDayOfDSTStart^0,w,c
   839   0010E0  5C17               	subwf	(??_calculateDayOfDSTStart+6)^0,w,c
   840   0010E2  6E19               	movwf	(??_calculateDayOfDSTStart+8)^0,c
   841   0010E4  5012               	movf	(??_calculateDayOfDSTStart+1)^0,w,c
   842   0010E6  5818               	subwfb	(??_calculateDayOfDSTStart+7)^0,w,c
   843   0010E8  6E1A               	movwf	(??_calculateDayOfDSTStart+9)^0,c
   844   0010EA  502B               	movf	calculateDayOfDSTStart@K^0,w,c
   845   0010EC  2619               	addwf	(??_calculateDayOfDSTStart+8)^0,f,c
   846   0010EE  502C               	movf	(calculateDayOfDSTStart@K+1)^0,w,c
   847   0010F0  221A               	addwfc	(??_calculateDayOfDSTStart+9)^0,f,c
   848   0010F2  0E0B               	movlw	11
   849   0010F4  2419               	addwf	(??_calculateDayOfDSTStart+8)^0,w,c
   850   0010F6  6E05               	movwf	___lwmod@dividend^0,c
   851   0010F8  0E00               	movlw	0
   852   0010FA  201A               	addwfc	(??_calculateDayOfDSTStart+9)^0,w,c
   853   0010FC  6E06               	movwf	(___lwmod@dividend+1)^0,c
   854   0010FE  0E00               	movlw	0
   855   001100  6E08               	movwf	(___lwmod@divisor+1)^0,c
   856   001102  0E07               	movlw	7
   857   001104  6E07               	movwf	___lwmod@divisor^0,c
   858   001106  EC44  F00A         	call	___lwmod	;wreg free
   859   00110A  C005  F01F         	movff	?___lwmod,calculateDayOfDSTStart@h
   860   00110E  C006  F020         	movff	?___lwmod+1,calculateDayOfDSTStart@h+1
   861   001112                     
   862                           ;date_finders.c: 21:     unsigned int dayOfWeekMarch1st = (h + 6) % 7;
   863   001112  0E06               	movlw	6
   864   001114  241F               	addwf	calculateDayOfDSTStart@h^0,w,c
   865   001116  6E05               	movwf	___lwmod@dividend^0,c
   866   001118  0E00               	movlw	0
   867   00111A  2020               	addwfc	(calculateDayOfDSTStart@h+1)^0,w,c
   868   00111C  6E06               	movwf	(___lwmod@dividend+1)^0,c
   869   00111E  0E00               	movlw	0
   870   001120  6E08               	movwf	(___lwmod@divisor+1)^0,c
   871   001122  0E07               	movlw	7
   872   001124  6E07               	movwf	___lwmod@divisor^0,c
   873   001126  EC44  F00A         	call	___lwmod	;wreg free
   874   00112A  C005  F021         	movff	?___lwmod,calculateDayOfDSTStart@dayOfWeekMarch1st
   875   00112E  C006  F022         	movff	?___lwmod+1,calculateDayOfDSTStart@dayOfWeekMarch1st+1
   876   001132                     
   877                           ;date_finders.c: 24:     unsigned int dayOfWeekMarch31st = (dayOfWeekMarch1st + 30) % 7;
   878   001132  0E1E               	movlw	30
   879   001134  2421               	addwf	calculateDayOfDSTStart@dayOfWeekMarch1st^0,w,c
   880   001136  6E05               	movwf	___lwmod@dividend^0,c
   881   001138  0E00               	movlw	0
   882   00113A  2022               	addwfc	(calculateDayOfDSTStart@dayOfWeekMarch1st+1)^0,w,c
   883   00113C  6E06               	movwf	(___lwmod@dividend+1)^0,c
   884   00113E  0E00               	movlw	0
   885   001140  6E08               	movwf	(___lwmod@divisor+1)^0,c
   886   001142  0E07               	movlw	7
   887   001144  6E07               	movwf	___lwmod@divisor^0,c
   888   001146  EC44  F00A         	call	___lwmod	;wreg free
   889   00114A  C005  F023         	movff	?___lwmod,calculateDayOfDSTStart@dayOfWeekMarch31st
   890   00114E  C006  F024         	movff	?___lwmod+1,calculateDayOfDSTStart@dayOfWeekMarch31st+1
   891   001152                     
   892                           ;date_finders.c: 27:     unsigned int lastSundayDateMarch = 31 - dayOfWeekMarch31st;
   893   001152  5023               	movf	calculateDayOfDSTStart@dayOfWeekMarch31st^0,w,c
   894   001154  081F               	sublw	31
   895   001156  6E25               	movwf	calculateDayOfDSTStart@lastSundayDateMarch^0,c
   896   001158  5024               	movf	(calculateDayOfDSTStart@dayOfWeekMarch31st+1)^0,w,c
   897   00115A  A0D8               	btfss	status,0,c
   898   00115C  2AE8               	incf	wreg,f,c
   899   00115E  0800               	sublw	0
   900   001160  6E26               	movwf	(calculateDayOfDSTStart@lastSundayDateMarch+1)^0,c
   901   001162                     
   902                           ;date_finders.c: 30:     unsigned int dayOfYearForDSTStart = daysBeforeMarch + lastSunda
      +                          yDateMarch;
   903   001162  5025               	movf	calculateDayOfDSTStart@lastSundayDateMarch^0,w,c
   904   001164  241D               	addwf	calculateDayOfDSTStart@daysBeforeMarch^0,w,c
   905   001166  6E27               	movwf	calculateDayOfDSTStart@dayOfYearForDSTStart^0,c
   906   001168  5026               	movf	(calculateDayOfDSTStart@lastSundayDateMarch+1)^0,w,c
   907   00116A  201E               	addwfc	(calculateDayOfDSTStart@daysBeforeMarch+1)^0,w,c
   908   00116C  6E28               	movwf	(calculateDayOfDSTStart@dayOfYearForDSTStart+1)^0,c
   909   00116E                     
   910                           ;date_finders.c: 32:     return dayOfYearForDSTStart;
   911   00116E  C027  F00F         	movff	calculateDayOfDSTStart@dayOfYearForDSTStart,?_calculateDayOfDSTStart
   912   001172  C028  F010         	movff	calculateDayOfDSTStart@dayOfYearForDSTStart+1,?_calculateDayOfDSTStart+1
   913   001176  0012               	return		;funcret
   914   001178                     __end_of_calculateDayOfDSTStart:
   915                           	callstack 0
   916                           
   917 ;; *************** function _calculateDayOfDSTEnd *****************
   918 ;; Defined at:
   919 ;;		line 35 in file "date_finders.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  year            2   14[COMRAM] unsigned int 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  J               2   44[COMRAM] unsigned int 
   924 ;;  K               2   42[COMRAM] unsigned int 
   925 ;;  dayOfYearFor    2   38[COMRAM] unsigned int 
   926 ;;  lastSundayDa    2   36[COMRAM] unsigned int 
   927 ;;  dayOfWeekOct    2   34[COMRAM] unsigned int 
   928 ;;  dayOfWeekOct    2   32[COMRAM] unsigned int 
   929 ;;  h               2   30[COMRAM] unsigned int 
   930 ;;  daysBeforeOc    2   28[COMRAM] unsigned int 
   931 ;;  leapYear        2   26[COMRAM] unsigned int 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  2   14[COMRAM] unsigned int 
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   942 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   943 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   944 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   945 ;;Total ram usage:       32 bytes
   946 ;; Hardware stack levels used: 1
   947 ;; Hardware stack levels required when called: 4
   948 ;; This function calls:
   949 ;;		___lwdiv
   950 ;;		___lwmod
   951 ;;		_isLeapYear
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           	psect	text2
   958   001178                     __ptext2:
   959                           	callstack 0
   960   001178                     _calculateDayOfDSTEnd:
   961                           	callstack 26
   962   001178                     
   963                           ;date_finders.c: 36:     unsigned int leapYear = isLeapYear(year);
   964   001178  C00F  F00A         	movff	calculateDayOfDSTEnd@year,isLeapYear@year
   965   00117C  C010  F00B         	movff	calculateDayOfDSTEnd@year+1,isLeapYear@year+1
   966   001180  ECCD  F009         	call	_isLeapYear	;wreg free
   967   001184  C00A  F01B         	movff	?_isLeapYear,calculateDayOfDSTEnd@leapYear
   968   001188  C00B  F01C         	movff	?_isLeapYear+1,calculateDayOfDSTEnd@leapYear+1
   969   00118C                     
   970                           ;date_finders.c: 38:     unsigned int daysBeforeOctober = 31 + (leapYear ? 29 : 28) + 31
      +                           + 30 + 31 + 30 + 31 + 31 + 30;
   971   00118C  501B               	movf	calculateDayOfDSTEnd@leapYear^0,w,c
   972   00118E  101C               	iorwf	(calculateDayOfDSTEnd@leapYear+1)^0,w,c
   973   001190  A4D8               	btfss	status,2,c
   974   001192  EFCD  F008         	goto	u681
   975   001196  EFCF  F008         	goto	u680
   976   00119A                     u681:
   977   00119A  EFD5  F008         	goto	l1380
   978   00119E                     u680:
   979   00119E  0E00               	movlw	0
   980   0011A0  6E2A               	movwf	(_calculateDayOfDSTEnd$1156+1)^0,c
   981   0011A2  0E1C               	movlw	28
   982   0011A4  6E29               	movwf	_calculateDayOfDSTEnd$1156^0,c
   983   0011A6  EFD9  F008         	goto	l1382
   984   0011AA                     l1380:
   985   0011AA  0E00               	movlw	0
   986   0011AC  6E2A               	movwf	(_calculateDayOfDSTEnd$1156+1)^0,c
   987   0011AE  0E1D               	movlw	29
   988   0011B0  6E29               	movwf	_calculateDayOfDSTEnd$1156^0,c
   989   0011B2                     l1382:
   990   0011B2  0EF5               	movlw	245
   991   0011B4  2429               	addwf	_calculateDayOfDSTEnd$1156^0,w,c
   992   0011B6  6E1D               	movwf	calculateDayOfDSTEnd@daysBeforeOctober^0,c
   993   0011B8  0E00               	movlw	0
   994   0011BA  202A               	addwfc	(_calculateDayOfDSTEnd$1156+1)^0,w,c
   995   0011BC  6E1E               	movwf	(calculateDayOfDSTEnd@daysBeforeOctober+1)^0,c
   996   0011BE                     
   997                           ;date_finders.c: 41:     unsigned int K = year % 100;
   998   0011BE  C00F  F005         	movff	calculateDayOfDSTEnd@year,___lwmod@dividend
   999   0011C2  C010  F006         	movff	calculateDayOfDSTEnd@year+1,___lwmod@dividend+1
  1000   0011C6  0E00               	movlw	0
  1001   0011C8  6E08               	movwf	(___lwmod@divisor+1)^0,c
  1002   0011CA  0E64               	movlw	100
  1003   0011CC  6E07               	movwf	___lwmod@divisor^0,c
  1004   0011CE  EC44  F00A         	call	___lwmod	;wreg free
  1005   0011D2  C005  F02B         	movff	?___lwmod,calculateDayOfDSTEnd@K
  1006   0011D6  C006  F02C         	movff	?___lwmod+1,calculateDayOfDSTEnd@K+1
  1007   0011DA                     
  1008                           ;date_finders.c: 42:     unsigned int J = year / 100;
  1009   0011DA  C00F  F005         	movff	calculateDayOfDSTEnd@year,___lwdiv@dividend
  1010   0011DE  C010  F006         	movff	calculateDayOfDSTEnd@year+1,___lwdiv@dividend+1
  1011   0011E2  0E00               	movlw	0
  1012   0011E4  6E08               	movwf	(___lwdiv@divisor+1)^0,c
  1013   0011E6  0E64               	movlw	100
  1014   0011E8  6E07               	movwf	___lwdiv@divisor^0,c
  1015   0011EA  EC0A  F00A         	call	___lwdiv	;wreg free
  1016   0011EE  C005  F02D         	movff	?___lwdiv,calculateDayOfDSTEnd@J
  1017   0011F2  C006  F02E         	movff	?___lwdiv+1,calculateDayOfDSTEnd@J+1
  1018   0011F6                     
  1019                           ;date_finders.c: 44:     unsigned int h = (1 + ((13 * (10 + 1)) / 5) + K + (K / 4) + (J 
      +                          / 4) - 2 * J) % 7;
  1020   0011F6  C02D  F011         	movff	calculateDayOfDSTEnd@J,??_calculateDayOfDSTEnd
  1021   0011FA  C02E  F012         	movff	calculateDayOfDSTEnd@J+1,??_calculateDayOfDSTEnd+1
  1022   0011FE  90D8               	bcf	status,0,c
  1023   001200  3611               	rlcf	??_calculateDayOfDSTEnd^0,f,c
  1024   001202  3612               	rlcf	(??_calculateDayOfDSTEnd+1)^0,f,c
  1025   001204  C02D  F013         	movff	calculateDayOfDSTEnd@J,??_calculateDayOfDSTEnd+2
  1026   001208  C02E  F014         	movff	calculateDayOfDSTEnd@J+1,??_calculateDayOfDSTEnd+3
  1027   00120C  90D8               	bcf	status,0,c
  1028   00120E  3214               	rrcf	(??_calculateDayOfDSTEnd+3)^0,f,c
  1029   001210  3213               	rrcf	(??_calculateDayOfDSTEnd+2)^0,f,c
  1030   001212  90D8               	bcf	status,0,c
  1031   001214  3214               	rrcf	(??_calculateDayOfDSTEnd+3)^0,f,c
  1032   001216  3213               	rrcf	(??_calculateDayOfDSTEnd+2)^0,f,c
  1033   001218  C02B  F015         	movff	calculateDayOfDSTEnd@K,??_calculateDayOfDSTEnd+4
  1034   00121C  C02C  F016         	movff	calculateDayOfDSTEnd@K+1,??_calculateDayOfDSTEnd+5
  1035   001220  90D8               	bcf	status,0,c
  1036   001222  3216               	rrcf	(??_calculateDayOfDSTEnd+5)^0,f,c
  1037   001224  3215               	rrcf	(??_calculateDayOfDSTEnd+4)^0,f,c
  1038   001226  90D8               	bcf	status,0,c
  1039   001228  3216               	rrcf	(??_calculateDayOfDSTEnd+5)^0,f,c
  1040   00122A  3215               	rrcf	(??_calculateDayOfDSTEnd+4)^0,f,c
  1041   00122C  5013               	movf	(??_calculateDayOfDSTEnd+2)^0,w,c
  1042   00122E  2415               	addwf	(??_calculateDayOfDSTEnd+4)^0,w,c
  1043   001230  6E17               	movwf	(??_calculateDayOfDSTEnd+6)^0,c
  1044   001232  5014               	movf	(??_calculateDayOfDSTEnd+3)^0,w,c
  1045   001234  2016               	addwfc	(??_calculateDayOfDSTEnd+5)^0,w,c
  1046   001236  6E18               	movwf	(??_calculateDayOfDSTEnd+7)^0,c
  1047   001238  5011               	movf	??_calculateDayOfDSTEnd^0,w,c
  1048   00123A  5C17               	subwf	(??_calculateDayOfDSTEnd+6)^0,w,c
  1049   00123C  6E19               	movwf	(??_calculateDayOfDSTEnd+8)^0,c
  1050   00123E  5012               	movf	(??_calculateDayOfDSTEnd+1)^0,w,c
  1051   001240  5818               	subwfb	(??_calculateDayOfDSTEnd+7)^0,w,c
  1052   001242  6E1A               	movwf	(??_calculateDayOfDSTEnd+9)^0,c
  1053   001244  502B               	movf	calculateDayOfDSTEnd@K^0,w,c
  1054   001246  2619               	addwf	(??_calculateDayOfDSTEnd+8)^0,f,c
  1055   001248  502C               	movf	(calculateDayOfDSTEnd@K+1)^0,w,c
  1056   00124A  221A               	addwfc	(??_calculateDayOfDSTEnd+9)^0,f,c
  1057   00124C  0E1D               	movlw	29
  1058   00124E  2419               	addwf	(??_calculateDayOfDSTEnd+8)^0,w,c
  1059   001250  6E05               	movwf	___lwmod@dividend^0,c
  1060   001252  0E00               	movlw	0
  1061   001254  201A               	addwfc	(??_calculateDayOfDSTEnd+9)^0,w,c
  1062   001256  6E06               	movwf	(___lwmod@dividend+1)^0,c
  1063   001258  0E00               	movlw	0
  1064   00125A  6E08               	movwf	(___lwmod@divisor+1)^0,c
  1065   00125C  0E07               	movlw	7
  1066   00125E  6E07               	movwf	___lwmod@divisor^0,c
  1067   001260  EC44  F00A         	call	___lwmod	;wreg free
  1068   001264  C005  F01F         	movff	?___lwmod,calculateDayOfDSTEnd@h
  1069   001268  C006  F020         	movff	?___lwmod+1,calculateDayOfDSTEnd@h+1
  1070   00126C                     
  1071                           ;date_finders.c: 45:     unsigned int dayOfWeekOctober1st = (h + 6) % 7;
  1072   00126C  0E06               	movlw	6
  1073   00126E  241F               	addwf	calculateDayOfDSTEnd@h^0,w,c
  1074   001270  6E05               	movwf	___lwmod@dividend^0,c
  1075   001272  0E00               	movlw	0
  1076   001274  2020               	addwfc	(calculateDayOfDSTEnd@h+1)^0,w,c
  1077   001276  6E06               	movwf	(___lwmod@dividend+1)^0,c
  1078   001278  0E00               	movlw	0
  1079   00127A  6E08               	movwf	(___lwmod@divisor+1)^0,c
  1080   00127C  0E07               	movlw	7
  1081   00127E  6E07               	movwf	___lwmod@divisor^0,c
  1082   001280  EC44  F00A         	call	___lwmod	;wreg free
  1083   001284  C005  F021         	movff	?___lwmod,calculateDayOfDSTEnd@dayOfWeekOctober1st
  1084   001288  C006  F022         	movff	?___lwmod+1,calculateDayOfDSTEnd@dayOfWeekOctober1st+1
  1085   00128C                     
  1086                           ;date_finders.c: 48:     unsigned int dayOfWeekOctober31st = (dayOfWeekOctober1st + 30) 
      +                          % 7;
  1087   00128C  0E1E               	movlw	30
  1088   00128E  2421               	addwf	calculateDayOfDSTEnd@dayOfWeekOctober1st^0,w,c
  1089   001290  6E05               	movwf	___lwmod@dividend^0,c
  1090   001292  0E00               	movlw	0
  1091   001294  2022               	addwfc	(calculateDayOfDSTEnd@dayOfWeekOctober1st+1)^0,w,c
  1092   001296  6E06               	movwf	(___lwmod@dividend+1)^0,c
  1093   001298  0E00               	movlw	0
  1094   00129A  6E08               	movwf	(___lwmod@divisor+1)^0,c
  1095   00129C  0E07               	movlw	7
  1096   00129E  6E07               	movwf	___lwmod@divisor^0,c
  1097   0012A0  EC44  F00A         	call	___lwmod	;wreg free
  1098   0012A4  C005  F023         	movff	?___lwmod,calculateDayOfDSTEnd@dayOfWeekOctober31st
  1099   0012A8  C006  F024         	movff	?___lwmod+1,calculateDayOfDSTEnd@dayOfWeekOctober31st+1
  1100   0012AC                     
  1101                           ;date_finders.c: 51:     unsigned int lastSundayDateOctober = 31 - dayOfWeekOctober31st;
  1102   0012AC  5023               	movf	calculateDayOfDSTEnd@dayOfWeekOctober31st^0,w,c
  1103   0012AE  081F               	sublw	31
  1104   0012B0  6E25               	movwf	calculateDayOfDSTEnd@lastSundayDateOctober^0,c
  1105   0012B2  5024               	movf	(calculateDayOfDSTEnd@dayOfWeekOctober31st+1)^0,w,c
  1106   0012B4  A0D8               	btfss	status,0,c
  1107   0012B6  2AE8               	incf	wreg,f,c
  1108   0012B8  0800               	sublw	0
  1109   0012BA  6E26               	movwf	(calculateDayOfDSTEnd@lastSundayDateOctober+1)^0,c
  1110   0012BC                     
  1111                           ;date_finders.c: 54:     unsigned int dayOfYearForDSTEnd = daysBeforeOctober + lastSunda
      +                          yDateOctober;
  1112   0012BC  5025               	movf	calculateDayOfDSTEnd@lastSundayDateOctober^0,w,c
  1113   0012BE  241D               	addwf	calculateDayOfDSTEnd@daysBeforeOctober^0,w,c
  1114   0012C0  6E27               	movwf	calculateDayOfDSTEnd@dayOfYearForDSTEnd^0,c
  1115   0012C2  5026               	movf	(calculateDayOfDSTEnd@lastSundayDateOctober+1)^0,w,c
  1116   0012C4  201E               	addwfc	(calculateDayOfDSTEnd@daysBeforeOctober+1)^0,w,c
  1117   0012C6  6E28               	movwf	(calculateDayOfDSTEnd@dayOfYearForDSTEnd+1)^0,c
  1118   0012C8                     
  1119                           ;date_finders.c: 56:     return dayOfYearForDSTEnd;
  1120   0012C8  C027  F00F         	movff	calculateDayOfDSTEnd@dayOfYearForDSTEnd,?_calculateDayOfDSTEnd
  1121   0012CC  C028  F010         	movff	calculateDayOfDSTEnd@dayOfYearForDSTEnd+1,?_calculateDayOfDSTEnd+1
  1122   0012D0  0012               	return		;funcret
  1123   0012D2                     __end_of_calculateDayOfDSTEnd:
  1124                           	callstack 0
  1125                           
  1126 ;; *************** function _isLeapYear *****************
  1127 ;; Defined at:
  1128 ;;		line 6 in file "date_finders.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;  year            2    9[COMRAM] unsigned int 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  2    9[COMRAM] unsigned int 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2, status,0, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1142 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1145 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1146 ;;Total ram usage:        5 bytes
  1147 ;; Hardware stack levels used: 1
  1148 ;; Hardware stack levels required when called: 3
  1149 ;; This function calls:
  1150 ;;		___lwmod
  1151 ;; This function is called by:
  1152 ;;		_main
  1153 ;;		_calculateDayOfDSTStart
  1154 ;;		_calculateDayOfDSTEnd
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text3
  1159   00139A                     __ptext3:
  1160                           	callstack 0
  1161   00139A                     _isLeapYear:
  1162                           	callstack 27
  1163   00139A                     
  1164                           ;date_finders.c: 7:     return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
  1165   00139A  0E01               	movlw	1
  1166   00139C  6E0E               	movwf	_isLeapYear$1139^0,c
  1167   00139E  0E03               	movlw	3
  1168   0013A0  140A               	andwf	isLeapYear@year^0,w,c
  1169   0013A2  6E0C               	movwf	??_isLeapYear^0,c
  1170   0013A4  0E00               	movlw	0
  1171   0013A6  140B               	andwf	(isLeapYear@year+1)^0,w,c
  1172   0013A8  6E0D               	movwf	(??_isLeapYear+1)^0,c
  1173   0013AA  500C               	movf	??_isLeapYear^0,w,c
  1174   0013AC  100D               	iorwf	(??_isLeapYear+1)^0,w,c
  1175   0013AE  A4D8               	btfss	status,2,c
  1176   0013B0  EFDC  F009         	goto	u521
  1177   0013B4  EFDE  F009         	goto	u520
  1178   0013B8                     u521:
  1179   0013B8  EFF1  F009         	goto	l1296
  1180   0013BC                     u520:
  1181   0013BC  C00A  F005         	movff	isLeapYear@year,___lwmod@dividend
  1182   0013C0  C00B  F006         	movff	isLeapYear@year+1,___lwmod@dividend+1
  1183   0013C4  0E00               	movlw	0
  1184   0013C6  6E08               	movwf	(___lwmod@divisor+1)^0,c
  1185   0013C8  0E64               	movlw	100
  1186   0013CA  6E07               	movwf	___lwmod@divisor^0,c
  1187   0013CC  EC44  F00A         	call	___lwmod	;wreg free
  1188   0013D0  5005               	movf	?___lwmod^0,w,c
  1189   0013D2  1006               	iorwf	(?___lwmod+1)^0,w,c
  1190   0013D4  A4D8               	btfss	status,2,c
  1191   0013D6  EFEF  F009         	goto	u531
  1192   0013DA  EFF1  F009         	goto	u530
  1193   0013DE                     u531:
  1194   0013DE  EF06  F00A         	goto	l1300
  1195   0013E2                     u530:
  1196   0013E2                     l1296:
  1197   0013E2  C00A  F005         	movff	isLeapYear@year,___lwmod@dividend
  1198   0013E6  C00B  F006         	movff	isLeapYear@year+1,___lwmod@dividend+1
  1199   0013EA  0E01               	movlw	1
  1200   0013EC  6E08               	movwf	(___lwmod@divisor+1)^0,c
  1201   0013EE  0E90               	movlw	144
  1202   0013F0  6E07               	movwf	___lwmod@divisor^0,c
  1203   0013F2  EC44  F00A         	call	___lwmod	;wreg free
  1204   0013F6  5005               	movf	?___lwmod^0,w,c
  1205   0013F8  1006               	iorwf	(?___lwmod+1)^0,w,c
  1206   0013FA  B4D8               	btfsc	status,2,c
  1207   0013FC  EF02  F00A         	goto	u541
  1208   001400  EF04  F00A         	goto	u540
  1209   001404                     u541:
  1210   001404  EF06  F00A         	goto	l1300
  1211   001408                     u540:
  1212   001408  0E00               	movlw	0
  1213   00140A  6E0E               	movwf	_isLeapYear$1139^0,c
  1214   00140C                     l1300:
  1215   00140C  C00E  F00A         	movff	_isLeapYear$1139,?_isLeapYear
  1216   001410  6A0B               	clrf	(?_isLeapYear+1)^0,c
  1217   001412  0012               	return		;funcret
  1218   001414                     __end_of_isLeapYear:
  1219                           	callstack 0
  1220                           
  1221 ;; *************** function ___lwmod *****************
  1222 ;; Defined at:
  1223 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  dividend        2    4[COMRAM] unsigned int 
  1226 ;;  divisor         2    6[COMRAM] unsigned int 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  counter         1    8[COMRAM] unsigned char 
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  2    4[COMRAM] unsigned int 
  1231 ;; Registers used:
  1232 ;;		wreg, status,2, status,0
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1241 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1242 ;;Total ram usage:        5 bytes
  1243 ;; Hardware stack levels used: 1
  1244 ;; Hardware stack levels required when called: 2
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_isLeapYear
  1249 ;;		_calculateDayOfDSTStart
  1250 ;;		_calculateDayOfDSTEnd
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text4
  1255   001488                     __ptext4:
  1256                           	callstack 0
  1257   001488                     ___lwmod:
  1258                           	callstack 27
  1259   001488  5007               	movf	___lwmod@divisor^0,w,c
  1260   00148A  1008               	iorwf	(___lwmod@divisor+1)^0,w,c
  1261   00148C  B4D8               	btfsc	status,2,c
  1262   00148E  EF4B  F00A         	goto	u491
  1263   001492  EF4D  F00A         	goto	u490
  1264   001496                     u491:
  1265   001496  EF71  F00A         	goto	l726
  1266   00149A                     u490:
  1267   00149A  0E01               	movlw	1
  1268   00149C  6E09               	movwf	___lwmod@counter^0,c
  1269   00149E  EF55  F00A         	goto	l1280
  1270   0014A2                     l1278:
  1271   0014A2  90D8               	bcf	status,0,c
  1272   0014A4  3607               	rlcf	___lwmod@divisor^0,f,c
  1273   0014A6  3608               	rlcf	(___lwmod@divisor+1)^0,f,c
  1274   0014A8  2A09               	incf	___lwmod@counter^0,f,c
  1275   0014AA                     l1280:
  1276   0014AA  AE08               	btfss	(___lwmod@divisor+1)^0,7,c
  1277   0014AC  EF5A  F00A         	goto	u501
  1278   0014B0  EF5C  F00A         	goto	u500
  1279   0014B4                     u501:
  1280   0014B4  EF51  F00A         	goto	l1278
  1281   0014B8                     u500:
  1282   0014B8                     l1282:
  1283   0014B8  5007               	movf	___lwmod@divisor^0,w,c
  1284   0014BA  5C05               	subwf	___lwmod@dividend^0,w,c
  1285   0014BC  5008               	movf	(___lwmod@divisor+1)^0,w,c
  1286   0014BE  5806               	subwfb	(___lwmod@dividend+1)^0,w,c
  1287   0014C0  A0D8               	btfss	status,0,c
  1288   0014C2  EF65  F00A         	goto	u511
  1289   0014C6  EF67  F00A         	goto	u510
  1290   0014CA                     u511:
  1291   0014CA  EF6B  F00A         	goto	l1286
  1292   0014CE                     u510:
  1293   0014CE  5007               	movf	___lwmod@divisor^0,w,c
  1294   0014D0  5E05               	subwf	___lwmod@dividend^0,f,c
  1295   0014D2  5008               	movf	(___lwmod@divisor+1)^0,w,c
  1296   0014D4  5A06               	subwfb	(___lwmod@dividend+1)^0,f,c
  1297   0014D6                     l1286:
  1298   0014D6  90D8               	bcf	status,0,c
  1299   0014D8  3208               	rrcf	(___lwmod@divisor+1)^0,f,c
  1300   0014DA  3207               	rrcf	___lwmod@divisor^0,f,c
  1301   0014DC  2E09               	decfsz	___lwmod@counter^0,f,c
  1302   0014DE  EF5C  F00A         	goto	l1282
  1303   0014E2                     l726:
  1304   0014E2  C005  F005         	movff	___lwmod@dividend,?___lwmod
  1305   0014E6  C006  F006         	movff	___lwmod@dividend+1,?___lwmod+1
  1306   0014EA  0012               	return		;funcret
  1307   0014EC                     __end_of___lwmod:
  1308                           	callstack 0
  1309                           
  1310 ;; *************** function ___lwdiv *****************
  1311 ;; Defined at:
  1312 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  dividend        2    4[COMRAM] unsigned int 
  1315 ;;  divisor         2    6[COMRAM] unsigned int 
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  quotient        2    8[COMRAM] unsigned int 
  1318 ;;  counter         1   10[COMRAM] unsigned char 
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  2    4[COMRAM] unsigned int 
  1321 ;; Registers used:
  1322 ;;		wreg, status,2, status,0
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1329 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1332 ;;Total ram usage:        7 bytes
  1333 ;; Hardware stack levels used: 1
  1334 ;; Hardware stack levels required when called: 2
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_calculateDayOfDSTStart
  1339 ;;		_calculateDayOfDSTEnd
  1340 ;;		_LED_Light_Meter
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text5
  1345   001414                     __ptext5:
  1346                           	callstack 0
  1347   001414                     ___lwdiv:
  1348                           	callstack 27
  1349   001414  0E00               	movlw	0
  1350   001416  6E0A               	movwf	(___lwdiv@quotient+1)^0,c
  1351   001418  0E00               	movlw	0
  1352   00141A  6E09               	movwf	___lwdiv@quotient^0,c
  1353   00141C  5007               	movf	___lwdiv@divisor^0,w,c
  1354   00141E  1008               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1355   001420  B4D8               	btfsc	status,2,c
  1356   001422  EF15  F00A         	goto	u551
  1357   001426  EF17  F00A         	goto	u550
  1358   00142A                     u551:
  1359   00142A  EF3F  F00A         	goto	l716
  1360   00142E                     u550:
  1361   00142E  0E01               	movlw	1
  1362   001430  6E0B               	movwf	___lwdiv@counter^0,c
  1363   001432  EF1F  F00A         	goto	l1312
  1364   001436                     l1310:
  1365   001436  90D8               	bcf	status,0,c
  1366   001438  3607               	rlcf	___lwdiv@divisor^0,f,c
  1367   00143A  3608               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1368   00143C  2A0B               	incf	___lwdiv@counter^0,f,c
  1369   00143E                     l1312:
  1370   00143E  AE08               	btfss	(___lwdiv@divisor+1)^0,7,c
  1371   001440  EF24  F00A         	goto	u561
  1372   001444  EF26  F00A         	goto	u560
  1373   001448                     u561:
  1374   001448  EF1B  F00A         	goto	l1310
  1375   00144C                     u560:
  1376   00144C                     l1314:
  1377   00144C  90D8               	bcf	status,0,c
  1378   00144E  3609               	rlcf	___lwdiv@quotient^0,f,c
  1379   001450  360A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1380   001452  5007               	movf	___lwdiv@divisor^0,w,c
  1381   001454  5C05               	subwf	___lwdiv@dividend^0,w,c
  1382   001456  5008               	movf	(___lwdiv@divisor+1)^0,w,c
  1383   001458  5806               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1384   00145A  A0D8               	btfss	status,0,c
  1385   00145C  EF32  F00A         	goto	u571
  1386   001460  EF34  F00A         	goto	u570
  1387   001464                     u571:
  1388   001464  EF39  F00A         	goto	l1322
  1389   001468                     u570:
  1390   001468  5007               	movf	___lwdiv@divisor^0,w,c
  1391   00146A  5E05               	subwf	___lwdiv@dividend^0,f,c
  1392   00146C  5008               	movf	(___lwdiv@divisor+1)^0,w,c
  1393   00146E  5A06               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1394   001470  8009               	bsf	___lwdiv@quotient^0,0,c
  1395   001472                     l1322:
  1396   001472  90D8               	bcf	status,0,c
  1397   001474  3208               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1398   001476  3207               	rrcf	___lwdiv@divisor^0,f,c
  1399   001478  2E0B               	decfsz	___lwdiv@counter^0,f,c
  1400   00147A  EF26  F00A         	goto	l1314
  1401   00147E                     l716:
  1402   00147E  C009  F005         	movff	___lwdiv@quotient,?___lwdiv
  1403   001482  C00A  F006         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1404   001486  0012               	return		;funcret
  1405   001488                     __end_of___lwdiv:
  1406                           	callstack 0
  1407                           
  1408 ;; *************** function _Timer0_init *****************
  1409 ;; Defined at:
  1410 ;;		line 9 in file "timers.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;		None
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1428 ;;Total ram usage:        0 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 2
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text6
  1439   001528                     __ptext6:
  1440                           	callstack 0
  1441   001528                     _Timer0_init:
  1442                           	callstack 28
  1443   001528                     
  1444                           ;timers.c: 11:     T0CON1bits.T0CS=0b010;
  1445   001528  50D6               	movf	214,w,c	;volatile
  1446   00152A  0B1F               	andlw	-225
  1447   00152C  0940               	iorlw	64
  1448   00152E  6ED6               	movwf	214,c	;volatile
  1449   001530                     
  1450                           ;timers.c: 12:     T0CON1bits.T0ASYNC=1;
  1451   001530  88D6               	bsf	214,4,c	;volatile
  1452                           
  1453                           ;timers.c: 13:     T0CON1bits.T0CKPS=0b1000;
  1454   001532  50D6               	movf	214,w,c	;volatile
  1455   001534  0BF0               	andlw	-16
  1456   001536  0908               	iorlw	8
  1457   001538  6ED6               	movwf	214,c	;volatile
  1458   00153A                     
  1459                           ;timers.c: 14:     T0CON0bits.T016BIT=1;
  1460   00153A  88D5               	bsf	213,4,c	;volatile
  1461   00153C                     
  1462                           ;timers.c: 16:     PIE0bits.TMR0IE = 1;
  1463   00153C  010E               	movlb	14	; () banked
  1464   00153E  8B29               	bsf	41,5,b	;volatile
  1465   001540                     
  1466                           ; BSR set to: 14
  1467                           ;timers.c: 17:     PIR0bits.TMR0IF = 0;
  1468   001540  9B33               	bcf	51,5,b	;volatile
  1469   001542                     
  1470                           ; BSR set to: 14
  1471                           ;timers.c: 18:     IPR0bits.TMR0IP = 0;
  1472   001542  9B1F               	bcf	31,5,b	;volatile
  1473   001544                     
  1474                           ; BSR set to: 14
  1475                           ;timers.c: 19:     INTCONbits.IPEN = 1;
  1476   001544  8AF2               	bsf	242,5,c	;volatile
  1477   001546                     
  1478                           ; BSR set to: 14
  1479                           ;timers.c: 20:     INTCONbits.PEIE = 1;
  1480   001546  8CF2               	bsf	242,6,c	;volatile
  1481   001548                     
  1482                           ; BSR set to: 14
  1483                           ;timers.c: 21:     INTCONbits.GIE = 1;
  1484   001548  8EF2               	bsf	242,7,c	;volatile
  1485                           
  1486                           ;timers.c: 24:     TMR0H=00001011;
  1487   00154A  0E09               	movlw	9
  1488   00154C  6ED4               	movwf	212,c	;volatile
  1489                           
  1490                           ;timers.c: 25:     TMR0L=110011011;
  1491   00154E  0E83               	movlw	131
  1492   001550  6ED3               	movwf	211,c	;volatile
  1493   001552                     
  1494                           ; BSR set to: 14
  1495                           ;timers.c: 26:     T0CON0bits.T0EN=1;
  1496   001552  8ED5               	bsf	213,7,c	;volatile
  1497   001554                     
  1498                           ; BSR set to: 14
  1499   001554  0012               	return		;funcret
  1500   001556                     __end_of_Timer0_init:
  1501                           	callstack 0
  1502                           
  1503 ;; *************** function _LEDarray_init *****************
  1504 ;; Defined at:
  1505 ;;		line 8 in file "LEDarray.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		wreg, status,2
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1523 ;;Total ram usage:        0 bytes
  1524 ;; Hardware stack levels used: 1
  1525 ;; Hardware stack levels required when called: 2
  1526 ;; This function calls:
  1527 ;;		Nothing
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text7
  1534   001556                     __ptext7:
  1535                           	callstack 0
  1536   001556                     _LEDarray_init:
  1537                           	callstack 28
  1538   001556                     
  1539                           ;LEDarray.c: 10:     LATA = 0;
  1540   001556  0E00               	movlw	0
  1541   001558  6E79               	movwf	121,c	;volatile
  1542                           
  1543                           ;LEDarray.c: 11:     LATB = 0;
  1544   00155A  0E00               	movlw	0
  1545   00155C  6E7A               	movwf	122,c	;volatile
  1546   00155E                     
  1547                           ;LEDarray.c: 12:     LATFbits.LATF0 = 0;
  1548   00155E  907E               	bcf	126,0,c	;volatile
  1549   001560                     
  1550                           ;LEDarray.c: 13:     LATFbits.LATF6 = 0;
  1551   001560  9C7E               	bcf	126,6,c	;volatile
  1552                           
  1553                           ;LEDarray.c: 14:     LATG = 0;
  1554   001562  0E00               	movlw	0
  1555   001564  6E7F               	movwf	127,c	;volatile
  1556   001566                     
  1557                           ;LEDarray.c: 15:  LATHbits.LATH3 = 0;
  1558   001566  9680               	bcf	128,3,c	;volatile
  1559                           
  1560                           ;LEDarray.c: 18:     TRISA = 0;
  1561   001568  0E00               	movlw	0
  1562   00156A  6E81               	movwf	129,c	;volatile
  1563                           
  1564                           ;LEDarray.c: 19:  TRISB = 0;
  1565   00156C  0E00               	movlw	0
  1566   00156E  6E82               	movwf	130,c	;volatile
  1567   001570                     
  1568                           ;LEDarray.c: 20:     TRISFbits.TRISF0 = 0;
  1569   001570  9086               	bcf	134,0,c	;volatile
  1570   001572                     
  1571                           ;LEDarray.c: 21:     TRISFbits.TRISF6 = 0;
  1572   001572  9C86               	bcf	134,6,c	;volatile
  1573                           
  1574                           ;LEDarray.c: 22:     TRISG = 0;
  1575   001574  0E00               	movlw	0
  1576   001576  6E87               	movwf	135,c	;volatile
  1577   001578                     
  1578                           ;LEDarray.c: 23:     TRISHbits.TRISH3 = 0;
  1579   001578  9688               	bcf	136,3,c	;volatile
  1580   00157A                     
  1581                           ;LEDarray.c: 25:     TRISFbits.TRISF2=1;
  1582   00157A  8486               	bsf	134,2,c	;volatile
  1583   00157C                     
  1584                           ;LEDarray.c: 26:     ANSELFbits.ANSELF2=0;
  1585   00157C  010E               	movlb	14	; () banked
  1586   00157E  95B4               	bcf	180,2,b	;volatile
  1587   001580                     
  1588                           ; BSR set to: 14
  1589   001580  0012               	return		;funcret
  1590   001582                     __end_of_LEDarray_init:
  1591                           	callstack 0
  1592                           
  1593 ;; *************** function _LEDarray_disp_bin *****************
  1594 ;; Defined at:
  1595 ;;		line 33 in file "LEDarray.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  number          2    4[COMRAM] unsigned int 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;		None
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		None
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1613 ;;Total ram usage:        2 bytes
  1614 ;; Hardware stack levels used: 1
  1615 ;; Hardware stack levels required when called: 2
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_main
  1620 ;;		_LEDarray_disp_PPM
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text8
  1625   0012D2                     __ptext8:
  1626                           	callstack 0
  1627   0012D2                     _LEDarray_disp_bin:
  1628                           	callstack 28
  1629   0012D2                     
  1630                           ;LEDarray.c: 33: void LEDarray_disp_bin(unsigned int number);LEDarray.c: 34: {;LEDarray.
      +                          c: 36:  if (number & 1) {LATGbits.LATG0 = 1;} else {LATGbits.LATG0 = 0;}
  1631   0012D2  A005               	btfss	LEDarray_disp_bin@number^0,0,c
  1632   0012D4  EF6E  F009         	goto	u581
  1633   0012D8  EF70  F009         	goto	u580
  1634   0012DC                     u581:
  1635   0012DC  EF73  F009         	goto	l98
  1636   0012E0                     u580:
  1637   0012E0  807F               	bsf	127,0,c	;volatile
  1638   0012E2  EF74  F009         	goto	l99
  1639   0012E6                     l98:
  1640   0012E6  907F               	bcf	127,0,c	;volatile
  1641   0012E8                     l99:
  1642                           
  1643                           ;LEDarray.c: 37:     if (number & (1 << 1)) {LATGbits.LATG1 = 1;} else {LATGbits.LATG1 =
      +                           0;}
  1644   0012E8  A205               	btfss	LEDarray_disp_bin@number^0,1,c
  1645   0012EA  EF79  F009         	goto	u591
  1646   0012EE  EF7B  F009         	goto	u590
  1647   0012F2                     u591:
  1648   0012F2  EF7E  F009         	goto	l100
  1649   0012F6                     u590:
  1650   0012F6  827F               	bsf	127,1,c	;volatile
  1651   0012F8  EF7F  F009         	goto	l101
  1652   0012FC                     l100:
  1653   0012FC  927F               	bcf	127,1,c	;volatile
  1654   0012FE                     l101:
  1655                           
  1656                           ;LEDarray.c: 38:     if (number & (1 << 2)) {LATAbits.LATA2 = 1;} else {LATAbits.LATA2 =
      +                           0;}
  1657   0012FE  A405               	btfss	LEDarray_disp_bin@number^0,2,c
  1658   001300  EF84  F009         	goto	u601
  1659   001304  EF86  F009         	goto	u600
  1660   001308                     u601:
  1661   001308  EF89  F009         	goto	l102
  1662   00130C                     u600:
  1663   00130C  8479               	bsf	121,2,c	;volatile
  1664   00130E  EF8A  F009         	goto	l103
  1665   001312                     l102:
  1666   001312  9479               	bcf	121,2,c	;volatile
  1667   001314                     l103:
  1668                           
  1669                           ;LEDarray.c: 39:     if (number & (1 << 3)) {LATFbits.LATF6 = 1;} else {LATFbits.LATF6 =
      +                           0;}
  1670   001314  A605               	btfss	LEDarray_disp_bin@number^0,3,c
  1671   001316  EF8F  F009         	goto	u611
  1672   00131A  EF91  F009         	goto	u610
  1673   00131E                     u611:
  1674   00131E  EF94  F009         	goto	l104
  1675   001322                     u610:
  1676   001322  8C7E               	bsf	126,6,c	;volatile
  1677   001324  EF95  F009         	goto	l105
  1678   001328                     l104:
  1679   001328  9C7E               	bcf	126,6,c	;volatile
  1680   00132A                     l105:
  1681                           
  1682                           ;LEDarray.c: 40:     if (number & (1 << 4)) {LATAbits.LATA4 = 1;} else {LATAbits.LATA4 =
      +                           0;}
  1683   00132A  A805               	btfss	LEDarray_disp_bin@number^0,4,c
  1684   00132C  EF9A  F009         	goto	u621
  1685   001330  EF9C  F009         	goto	u620
  1686   001334                     u621:
  1687   001334  EF9F  F009         	goto	l106
  1688   001338                     u620:
  1689   001338  8879               	bsf	121,4,c	;volatile
  1690   00133A  EFA0  F009         	goto	l107
  1691   00133E                     l106:
  1692   00133E  9879               	bcf	121,4,c	;volatile
  1693   001340                     l107:
  1694                           
  1695                           ;LEDarray.c: 41:     if (number & (1 << 5)) {LATAbits.LATA5 = 1;} else {LATAbits.LATA5 =
      +                           0;}
  1696   001340  AA05               	btfss	LEDarray_disp_bin@number^0,5,c
  1697   001342  EFA5  F009         	goto	u631
  1698   001346  EFA7  F009         	goto	u630
  1699   00134A                     u631:
  1700   00134A  EFAA  F009         	goto	l108
  1701   00134E                     u630:
  1702   00134E  8A79               	bsf	121,5,c	;volatile
  1703   001350  EFAB  F009         	goto	l109
  1704   001354                     l108:
  1705   001354  9A79               	bcf	121,5,c	;volatile
  1706   001356                     l109:
  1707                           
  1708                           ;LEDarray.c: 42:     if (number & (1 << 6)) {LATFbits.LATF0 = 1;} else {LATFbits.LATF0 =
      +                           0;}
  1709   001356  AC05               	btfss	LEDarray_disp_bin@number^0,6,c
  1710   001358  EFB0  F009         	goto	u641
  1711   00135C  EFB2  F009         	goto	u640
  1712   001360                     u641:
  1713   001360  EFB5  F009         	goto	l110
  1714   001364                     u640:
  1715   001364  807E               	bsf	126,0,c	;volatile
  1716   001366  EFB6  F009         	goto	l111
  1717   00136A                     l110:
  1718   00136A  907E               	bcf	126,0,c	;volatile
  1719   00136C                     l111:
  1720                           
  1721                           ;LEDarray.c: 43:     if (number & (1 << 7)) {LATBbits.LATB0 = 1;} else {LATBbits.LATB0 =
      +                           0;}
  1722   00136C  AE05               	btfss	LEDarray_disp_bin@number^0,7,c
  1723   00136E  EFBB  F009         	goto	u651
  1724   001372  EFBD  F009         	goto	u650
  1725   001376                     u651:
  1726   001376  EFC0  F009         	goto	l112
  1727   00137A                     u650:
  1728   00137A  807A               	bsf	122,0,c	;volatile
  1729   00137C  EFC1  F009         	goto	l113
  1730   001380                     l112:
  1731   001380  907A               	bcf	122,0,c	;volatile
  1732   001382                     l113:
  1733                           
  1734                           ;LEDarray.c: 44:     if (number & (1 << 8)) {LATBbits.LATB1 = 1;} else {LATBbits.LATB1 =
      +                           0;}
  1735   001382  A006               	btfss	(LEDarray_disp_bin@number+1)^0,0,c
  1736   001384  EFC6  F009         	goto	u661
  1737   001388  EFC8  F009         	goto	u660
  1738   00138C                     u661:
  1739   00138C  EFCB  F009         	goto	l114
  1740   001390                     u660:
  1741   001390  827A               	bsf	122,1,c	;volatile
  1742   001392  EFCC  F009         	goto	l116
  1743   001396                     l114:
  1744   001396  927A               	bcf	122,1,c	;volatile
  1745   001398                     l116:
  1746   001398  0012               	return		;funcret
  1747   00139A                     __end_of_LEDarray_disp_bin:
  1748                           	callstack 0
  1749                           
  1750 ;; *************** function _Interrupts_init *****************
  1751 ;; Defined at:
  1752 ;;		line 11 in file "interrupts.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		None
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1770 ;;Total ram usage:        0 bytes
  1771 ;; Hardware stack levels used: 1
  1772 ;; Hardware stack levels required when called: 2
  1773 ;; This function calls:
  1774 ;;		Nothing
  1775 ;; This function is called by:
  1776 ;;		_main
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text9
  1781   001594                     __ptext9:
  1782                           	callstack 0
  1783   001594                     _Interrupts_init:
  1784                           	callstack 28
  1785   001594                     
  1786                           ;interrupts.c: 15:     PIE2bits.C1IE = 1;
  1787   001594  010E               	movlb	14	; () banked
  1788   001596  812B               	bsf	43,0,b	;volatile
  1789                           
  1790                           ;interrupts.c: 16:     IPR2bits.C1IP = 1;
  1791   001598  8121               	bsf	33,0,b	;volatile
  1792                           
  1793                           ;interrupts.c: 17:     INTCONbits.PEIE = 1;
  1794   00159A  8CF2               	bsf	242,6,c	;volatile
  1795                           
  1796                           ;interrupts.c: 18:     INTCONbits.GIE = 1;
  1797   00159C  8EF2               	bsf	242,7,c	;volatile
  1798                           
  1799                           ;interrupts.c: 20:     LATEbits.LATE2 = 0;
  1800   00159E  947D               	bcf	125,2,c	;volatile
  1801                           
  1802                           ;interrupts.c: 21:     TRISEbits.TRISE2= 1;
  1803   0015A0  8485               	bsf	133,2,c	;volatile
  1804   0015A2                     
  1805                           ; BSR set to: 14
  1806   0015A2  0012               	return		;funcret
  1807   0015A4                     __end_of_Interrupts_init:
  1808                           	callstack 0
  1809                           
  1810 ;; *************** function _LowISR *****************
  1811 ;; Defined at:
  1812 ;;		line 42 in file "interrupts.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;		None
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;		None
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1828 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1829 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;Total ram usage:        3 bytes
  1831 ;; Hardware stack levels used: 1
  1832 ;; Hardware stack levels required when called: 1
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		Interrupt level 1
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	intcodelo
  1841   000018                     __pintcodelo:
  1842                           	callstack 0
  1843   000018                     _LowISR:
  1844                           	callstack 26
  1845                           
  1846                           ; BSR set to: 14
  1847                           ;incstack = 0
  1848   000018  8049               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  1849   00001A  CFD8 F002          	movff	status,??_LowISR
  1850   00001E  CFE8 F003          	movff	wreg,??_LowISR+1
  1851   000022  CFE0 F004          	movff	bsr,??_LowISR+2
  1852   000026                     
  1853                           ;interrupts.c: 45:     if (PIR0bits.TMR0IF == 1) {
  1854   000026  010E               	movlb	14	; () banked
  1855   000028  AB33               	btfss	51,5,b	;volatile
  1856   00002A  EF19  F000         	goto	i1u48_21
  1857   00002E  EF1B  F000         	goto	i1u48_20
  1858   000032                     i1u48_21:
  1859   000032  EF21  F000         	goto	i1l180
  1860   000036                     i1u48_20:
  1861   000036                     
  1862                           ; BSR set to: 14
  1863                           ;interrupts.c: 48:         LATEbits.LATE2 = 1;
  1864   000036  847D               	bsf	125,2,c	;volatile
  1865   000038                     
  1866                           ; BSR set to: 14
  1867                           ;interrupts.c: 49:         TMR0H=00001011;
  1868   000038  0E09               	movlw	9
  1869   00003A  6ED4               	movwf	212,c	;volatile
  1870                           
  1871                           ;interrupts.c: 50:         TMR0L=110011011;
  1872   00003C  0E83               	movlw	131
  1873   00003E  6ED3               	movwf	211,c	;volatile
  1874   000040                     
  1875                           ; BSR set to: 14
  1876                           ;interrupts.c: 51:         PIR0bits.TMR0IF = 0;
  1877   000040  9B33               	bcf	51,5,b	;volatile
  1878   000042                     i1l180:
  1879                           
  1880                           ; BSR set to: 14
  1881   000042  C004  FFE0         	movff	??_LowISR+2,bsr
  1882   000046  C003  FFE8         	movff	??_LowISR+1,wreg
  1883   00004A  C002  FFD8         	movff	??_LowISR,status
  1884   00004E  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1885   000050  0010               	retfie	
  1886   000052                     __end_of_LowISR:
  1887                           	callstack 0
  1888                           
  1889 ;; *************** function _HighISR *****************
  1890 ;; Defined at:
  1891 ;;		line 28 in file "interrupts.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;Total ram usage:        1 bytes
  1910 ;; Hardware stack levels used: 1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		Interrupt level 2
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	intcode
  1919   000008                     __pintcode:
  1920                           	callstack 0
  1921   000008                     _HighISR:
  1922                           	callstack 26
  1923                           
  1924                           ; BSR set to: 14
  1925                           ;incstack = 0
  1926   000008  8249               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1927   00000A  EF76  F00A         	goto	int_func
  1928                           
  1929                           	psect	intcode_body
  1930   0014EC                     __pintcode_body:
  1931                           	callstack 26
  1932   0014EC                     int_func:
  1933                           	callstack 26
  1934   0014EC                     
  1935                           ;interrupts.c: 31:     if (PIR2bits.C1IF == 1) {
  1936   0014EC  010E               	movlb	14	; () banked
  1937   0014EE  A135               	btfss	53,0,b	;volatile
  1938   0014F0  EF7C  F00A         	goto	i2u45_41
  1939   0014F4  EF7E  F00A         	goto	i2u45_40
  1940   0014F8                     i2u45_41:
  1941   0014F8  EF92  F00A         	goto	i2l174
  1942   0014FC                     i2u45_40:
  1943   0014FC                     
  1944                           ; BSR set to: 14
  1945                           ;interrupts.c: 32:         LATHbits.LATH3 = !LATHbits.LATH3;
  1946   0014FC  A680               	btfss	128,3,c	;volatile
  1947   0014FE  EF83  F00A         	goto	i2u46_41
  1948   001502  EF87  F00A         	goto	i2u46_40
  1949   001506                     i2u46_41:
  1950   001506  6A01               	clrf	??_HighISR^0,c
  1951   001508  2A01               	incf	??_HighISR^0,f,c
  1952   00150A  EF88  F00A         	goto	i2u47_48
  1953   00150E                     i2u46_40:
  1954   00150E  6A01               	clrf	??_HighISR^0,c
  1955   001510                     i2u47_48:
  1956   001510  4601               	rlncf	??_HighISR^0,f,c
  1957   001512  4601               	rlncf	??_HighISR^0,f,c
  1958   001514  4601               	rlncf	??_HighISR^0,f,c
  1959   001516  5080               	movf	128,w,c	;volatile
  1960   001518  1801               	xorwf	??_HighISR^0,w,c
  1961   00151A  0BF7               	andlw	-9
  1962   00151C  1801               	xorwf	??_HighISR^0,w,c
  1963   00151E  6E80               	movwf	128,c	;volatile
  1964   001520                     
  1965                           ;interrupts.c: 33:         PIR2bits.C1IF = 0;
  1966   001520  010E               	movlb	14	; () banked
  1967   001522  9135               	bcf	53,0,b	;volatile
  1968   001524                     i2l174:
  1969                           
  1970                           ; BSR set to: 14
  1971   001524  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1972   001526  0011               	retfie		f
  1973   001528                     __end_of_HighISR:
  1974                           	callstack 0
  1975                           
  1976                           	psect	smallconst
  1977   000E00                     __psmallconst:
  1978                           	callstack 0
  1979   000E00  00                 	db	0
  1980   000E01  00                 	db	0	; dummy byte at the end
  1981   000000                     
  1982                           	psect	rparam
  1983   000000                     
  1984                           	psect	temp
  1985   000049                     btemp:
  1986                           	callstack 0
  1987   000049                     	ds	1
  1988   000000                     int$flags	set	btemp
  1989   000000                     wtemp8	set	btemp+1
  1990   000000                     ttemp5	set	btemp+1
  1991   000000                     ttemp6	set	btemp+4
  1992   000000                     ttemp7	set	btemp+8
  1993                           
  1994                           	psect	config
  1995                           
  1996                           ;Config register CONFIG1L @ 0x300000
  1997                           ;	External Oscillator mode Selection bits
  1998                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1999                           ;	Power-up default value for COSC bits
  2000                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2001   300000                     	org	3145728
  2002   300000  AA                 	db	170
  2003                           
  2004                           ;Config register CONFIG1H @ 0x300001
  2005                           ;	unspecified, using default values
  2006                           ;	Clock Out Enable bit
  2007                           ;	CLKOUTEN = 0x1, unprogrammed default
  2008                           ;	Clock Switch Enable bit
  2009                           ;	CSWEN = 0x1, unprogrammed default
  2010                           ;	Fail-Safe Clock Monitor Enable bit
  2011                           ;	FCMEN = 0x1, unprogrammed default
  2012   300001                     	org	3145729
  2013   300001  FF                 	db	255
  2014                           
  2015                           ;Config register CONFIG3L @ 0x300004
  2016                           ;	WDT Period Select bits
  2017                           ;	WDTCPS = 0x1F, unprogrammed default
  2018                           ;	WDT operating mode
  2019                           ;	WDTE = OFF, WDT Disabled
  2020   300004                     	org	3145732
  2021   300004  9F                 	db	159
  2022                           
  2023                           ;Config register CONFIG3H @ 0x300005
  2024                           ;	unspecified, using default values
  2025                           ;	WDT Window Select bits
  2026                           ;	WDTCWS = 0x7, unprogrammed default
  2027                           ;	WDT input clock selector
  2028                           ;	WDTCCS = 0x7, unprogrammed default
  2029   300005                     	org	3145733
  2030   300005  FF                 	db	255
  2031                           tosu	equ	0xFFF
  2032                           tosh	equ	0xFFE
  2033                           tosl	equ	0xFFD
  2034                           stkptr	equ	0xFFC
  2035                           pclatu	equ	0xFFB
  2036                           pclath	equ	0xFFA
  2037                           pcl	equ	0xFF9
  2038                           tblptru	equ	0xFF8
  2039                           tblptrh	equ	0xFF7
  2040                           tblptrl	equ	0xFF6
  2041                           tablat	equ	0xFF5
  2042                           prodh	equ	0xFF4
  2043                           prodl	equ	0xFF3
  2044                           indf0	equ	0xFEF
  2045                           postinc0	equ	0xFEE
  2046                           postdec0	equ	0xFED
  2047                           preinc0	equ	0xFEC
  2048                           plusw0	equ	0xFEB
  2049                           fsr0h	equ	0xFEA
  2050                           fsr0l	equ	0xFE9
  2051                           wreg	equ	0xFE8
  2052                           indf1	equ	0xFE7
  2053                           postinc1	equ	0xFE6
  2054                           postdec1	equ	0xFE5
  2055                           preinc1	equ	0xFE4
  2056                           plusw1	equ	0xFE3
  2057                           fsr1h	equ	0xFE2
  2058                           fsr1l	equ	0xFE1
  2059                           bsr	equ	0xFE0
  2060                           indf2	equ	0xFDF
  2061                           postinc2	equ	0xFDE
  2062                           postdec2	equ	0xFDD
  2063                           preinc2	equ	0xFDC
  2064                           plusw2	equ	0xFDB
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     68      72
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_calculateDayOfDSTEnd
    _main->_calculateDayOfDSTStart
    _calculateDayOfDSTStart->_isLeapYear
    _calculateDayOfDSTEnd->_isLeapYear
    _isLeapYear->___lwmod

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   12233
                                             46 COMRAM    22    22      0
                    _Interrupts_init
                  _LEDarray_disp_bin
                      _LEDarray_init
                        _Timer0_init
               _calculateDayOfDSTEnd
             _calculateDayOfDSTStart
                         _isLeapYear
 ---------------------------------------------------------------------------------
 (1) _calculateDayOfDSTStart                              32    30      2    4711
                                             14 COMRAM    32    30      2
                            ___lwdiv
                            ___lwmod
                         _isLeapYear
 ---------------------------------------------------------------------------------
 (1) _calculateDayOfDSTEnd                                32    30      2    4711
                                             14 COMRAM    32    30      2
                            ___lwdiv
                            ___lwmod
                         _isLeapYear
 ---------------------------------------------------------------------------------
 (1) _isLeapYear                                           5     3      2    1997
                                              9 COMRAM     5     3      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    1679
                                              4 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDarray_disp_bin                                    2     0      2     350
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _LowISR                                               3     3      0       0
                                              1 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HighISR                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _LEDarray_disp_bin
   _LEDarray_init
   _Timer0_init
   _calculateDayOfDSTEnd
     ___lwdiv
     ___lwmod
     _isLeapYear
       ___lwmod
   _calculateDayOfDSTStart
     ___lwdiv
     ___lwmod
     _isLeapYear
   _isLeapYear

 _LowISR (ROOT)

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      48        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBIGSFRlhhlhh     A5      0       0      37        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBIGSFRlhhllh     7E      0       0      40        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     44      48       1       76.6%
BITBIGSFRhhlh       4A      0       0      34        0.0%
BITBIGSFRlll        30      0       0      46        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRlhhlhl     11      0       0      39        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlhhlhh      8      0       0      38        0.0%
BITBIGSFRllhh        7      0       0      44        0.0%
BITBIGSFRlhlh        7      0       0      42        0.0%
BITBIGSFRlhhh        2      0       0      36        0.0%
BITBIGSFRhhll        2      0       0      35        0.0%
BITBIGSFRllhl        1      0       0      45        0.0%
BITBIGSFRlhhlll      1      0       0      41        0.0%
BITBIGSFRlhll        1      0       0      43        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      48      47        0.0%
DATA                 0      0      48       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Feb 07 20:16:18 2024

                      main@daylight_savings 002F                                          l30 0F8A  
                                        l57 1554                                          l95 1580  
                                        l98 12E6                                          l99 12E8  
                                        bsr 0FE0                           ??_Interrupts_init 0005  
                                       l100 12FC                                         l101 12FE  
                                       l110 136A                                         l102 1312  
                                       l111 136C                                         l103 1314  
                                       l112 1380                                         l104 1328  
                                       l113 1382                                         l105 132A  
                                       l114 1396                                         l106 133E  
                                       l107 1340                                         l116 1398  
                                       l108 1354                                         l109 1356  
                                       l222 12D0                                         l215 1176  
                                       l208 1412                                         l168 15A2  
                                       l723 1486                                         l716 147E  
                                       l733 14EA                                         l726 14E2  
                                       l970 1594                                         l980 1540  
                                       l972 1528                                         l990 1552  
                                       l982 1542                                         l974 1530  
                                       l992 1556                                         l984 1544  
                                       l976 153A                                         l994 155E  
                                       l986 1546                                         l978 153C  
                                       l996 1560                                         l988 1548  
                                       l998 1566                                         u500 14B8  
                                       u501 14B4                                         u510 14CE  
                                       u511 14CA                                         u600 130C  
                                       u520 13BC                                         u601 1308  
                                       u521 13B8                                         u610 1322  
                                       u530 13E2                                         u611 131E  
                                       u531 13DE                                         u620 1338  
                                       u540 1408                                         u700 0E78  
                                       u621 1334                                         u541 1404  
                                       u701 0E74                                         u630 134E  
                                       u550 142E                                         u710 0E8A  
                                       u631 134A                                         u551 142A  
                                       u711 0E86                                         u640 1364  
                                       u560 144C                                         u800 0FA0  
                                       u720 0ECA                                         u641 1360  
                                       u561 1448                                         u801 0F9C  
                                       u721 0EC6                                         u650 137A  
                                       u570 1468                                         u490 149A  
                                       u810 0FC2                                         u730 0EDE  
                                       u651 1376                                         u571 1464  
                                       u491 1496                                         u811 0FBE  
                                       u731 0EDA                                         u660 1390  
                                       u580 12E0                                         u820 0FE8  
                                       u740 0F02                                         u661 138C  
                                       u581 12DC                                         u821 0FE4  
                                       u741 0EFE                                         u590 12F6  
                                       u670 1044                                         u830 100A  
                                       u750 0F16                                         u591 12F2  
                                       u671 1040                                         u831 1006  
                                       u751 0F12                                         u680 119E  
                                       u760 0F28                                         u681 119A  
                                       u761 0F24                                         u770 0F48  
                                       u690 0E54                                         u771 0F44  
                                       u691 0E50                                         u780 0F5E  
                                       u781 0F5A                                         u790 0F84  
                                       u791 0F80                       calculateDayOfDSTEnd@J 002D  
                     calculateDayOfDSTEnd@K 002B                       calculateDayOfDSTEnd@h 001F  
                                       wreg 0FE8                           main@backward_zone 003D  
 calculateDayOfDSTEnd@lastSundayDateOctober 0025                                        l1000 1570  
                                      l1002 1572                                        l1004 1578  
                                      l1006 157A                                        l1008 157C  
                                      l1300 140C                                        l1310 1436  
                                      l1320 1470                                        l1312 143E  
                                      l1304 1414                                        l1330 12F6  
                                      l1322 1472                                        l1314 144C  
                                      l1306 141C                                        l1410 0E58  
                                      l1402 0E02                                        l1340 1364  
                                      l1332 130C                                        l1324 1478  
                                      l1316 1452                                        l1308 142E  
                                      l1420 0EB2                                        l1412 0E5A  
                                      l1404 0E3A                                        l1342 137A  
                                      l1334 1322                                        l1326 12D2  
                                      l1318 1468                                        l1350 1044  
                                      l1430 0F02                                        l1422 0ECA  
                                      l1414 0E66                                        l1406 0E46  
                                      l1344 1390                                        l1336 1338  
                                      l1328 12E0                                        l1280 14AA  
                                      l1360 109C                                        l1352 1050  
                                      l1440 0F48                                        l1432 0F16  
                                      l1424 0EDE                                        l1416 0E78  
                                      l1408 0E54                                        l1338 134E  
                                      l1282 14B8                                        l1274 1488  
                                      l1290 139A                                        l1370 116E  
                                      l1362 1112                                        l1354 1058  
                                      l1346 101E                                        l1450 0F8C  
                                      l1442 0F5E                                        l1434 0F28  
                                      l1426 0EE2                                        l1418 0E8A  
                                      l1284 14CE                                        l1276 149A  
                                      l1292 139E                                        l1380 11AA  
                                      l1364 1132                                        l1356 1064  
                                      l1348 1032                                        l1460 0FD6  
                                      l1452 0FA0                                        l1444 0F6A  
                                      l1436 0F2E                                        l1428 0EEA  
                                      l1286 14D6                                        l1278 14A2  
                                      l1294 13BC                                        l1390 126C  
                                      l1382 11B2                                        l1374 1178  
                                      l1366 1152                                        l1358 1080  
                                      l1470 1012                                        l1462 0FE8  
                                      l1454 0FA8                                        l1446 0F72  
                                      l1438 0F36                                        l1288 14DC  
                                      l1296 13E2                                        l1392 128C  
                                      l1384 11BE                                        l1376 118C  
                                      l1368 1162                                        l1464 0FF0  
                                      l1456 0FAC                                        l1448 0F84  
                                      l1298 1408                                        l1394 12AC  
                                      l1386 11DA                                        l1378 119E  
                                      l1458 0FC2                                        l1466 0FF4  
                                      l1396 12BC                                        l1388 11F6  
                                      l1468 100A                                        l1398 12C8  
                                      _LATA 0F79                                        _LATB 0F7A  
                                      _LATG 0F7F                __end_of_calculateDayOfDSTEnd 12D2  
                                      _main 0E02                                        btemp 0049  
                                      start 0052                             __end_of_HighISR 1528  
                              ___param_bank 0000                                       ?_main 0001  
                           __end_of___lwdiv 1488                                       i1l180 0042  
                           __end_of___lwmod 14EC                                       i2l174 1524  
                                     _TMR0H 0FD4                                       _TMR0L 0FD3  
                                     _TRISA 0F81                                       _TRISB 0F82  
                                     _TRISG 0F87                                       ttemp5 004A  
                                     ttemp6 004D                                       ttemp7 0051  
                                     status 0FD8                                       wtemp8 004A  
                           __initialization 1582                                __end_of_main 101E  
                   calculateDayOfDSTStart@J 002D                     calculateDayOfDSTStart@K 002B  
                   calculateDayOfDSTStart@h 001F                     ?_calculateDayOfDSTStart 000F  
                                    ??_main 002F                main@fwd_daylight_savings_day 0037  
                             __activetblptr 0000                 _calculateDayOfDSTStart$1144 0029  
 calculateDayOfDSTStart@lastSundayDateMarch 0025                                      i1l1232 0026  
                                    i1l1234 0036                                      i1l1236 0038  
                                    i1l1238 0040                                      i2l1230 1520  
                                    i2l1226 14EC                                      i2l1228 14FC  
                                 ??_HighISR 0001                               main@light_end 0033  
                         _LEDarray_disp_bin 12D2                                      _LowISR 0018  
                        ?_LEDarray_disp_bin 0005                               ??_Timer0_init 0005  
   calculateDayOfDSTStart@dayOfWeekMarch1st 0021                                   ??___lwdiv 0009  
                                 ??___lwmod 0009              __end_of_calculateDayOfDSTStart 1178  
                       ??_LEDarray_disp_bin 0007                                      isa$std 0001  
                      _calculateDayOfDSTEnd 1178                                __mediumconst 0000  
                  calculateDayOfDSTEnd@year 000F                   __end_of_LEDarray_disp_bin 139A  
                                __accesstop 0060                     __end_of__initialization 158A  
                             ___rparam_used 0001                               _LEDarray_init 1556  
                           _Interrupts_init 1594                              __pcstackCOMRAM 0001  
  calculateDayOfDSTEnd@dayOfWeekOctober31st 0023                         __end_of_Timer0_init 1556  
                     ?_calculateDayOfDSTEnd 000F                              ?_LEDarray_init 0001  
                                   ?_LowISR 0001                                  _isLeapYear 139A  
                                   i1u48_20 0036                                     i1u48_21 0032  
                                   i2u45_40 14FC                                     i2u45_41 14F8  
                                   i2u46_40 150E                                     i2u46_41 1506  
                                   i2u47_48 1510                     __end_of_Interrupts_init 15A4  
                                   _HighISR 0008                                     __Hparam 0000  
                                   __Lparam 0000                                 _Timer0_init 1528  
    calculateDayOfDSTEnd@dayOfYearForDSTEnd 0027                             _isLeapYear$1139 000E  
  calculateDayOfDSTStart@dayOfWeekMarch31st 0023                                     ___lwdiv 1414  
                                   ___lwmod 1488                                __psmallconst 0E00  
                    ??_calculateDayOfDSTEnd 0011                                     __pcinit 1582  
                                   __ramtop 0E00                                     __ptext0 0E02  
                                   __ptext1 101E                                     __ptext2 1178  
                                   __ptext3 139A                                     __ptext4 1488  
                                   __ptext5 1414                                     __ptext6 1528  
                                   __ptext7 1556                                     __ptext8 12D2  
                                   __ptext9 1594                                     main@day 0041  
                            __pintcode_body 14EC                        end_of_initialization 158A  
                           ??_LEDarray_init 0005                                     int_func 14EC  
                               ?_isLeapYear 000A                                   _TRISEbits 0F85  
                                 _TRISFbits 0F86                                   _TRISHbits 0F88  
                               _CM1CON0bits 0ED0                                 _CM1CON1bits 0ED1  
                          ?_Interrupts_init 0001                              __end_of_LowISR 0052  
                       start_initialization 1582                                    ??_LowISR 0002  
                               __pbssCOMRAM 0045     calculateDayOfDSTEnd@dayOfWeekOctober1st 0021  
                                  ?_HighISR 0001                    ??_calculateDayOfDSTStart 0011  
                          ___lwdiv@dividend 0005                                ?_Timer0_init 0001  
                                 __pintcode 0008                                    ?___lwdiv 0005  
                                  ?___lwmod 0005                                 __pintcodelo 0018  
                 _calculateDayOfDSTEnd$1156 0029                                 __smallconst 0E00  
                          ___lwdiv@quotient 0009                                    _LATAbits 0F79  
                                  _LATBbits 0F7A                                    _LATEbits 0F7D  
                                  _LATFbits 0F7E                                    _LATGbits 0F7F  
                                  _LATHbits 0F80                                    _IPR0bits 0E1F  
                                  _IPR2bits 0E21                                    _PIE0bits 0E29  
                                  _PIE2bits 0E2B                                    _PIR0bits 0E33  
                                  _PIR2bits 0E35              calculateDayOfDSTStart@leapYear 001B  
                           main@light_state 003B                             main@light_start 0031  
                              ??_isLeapYear 000C                                  _CM1NCHbits 0ED2  
                                _CM1PCHbits 0ED3       calculateDayOfDSTStart@daysBeforeMarch 001D  
                     __end_of_LEDarray_init 1582                                    __Hrparam 0000  
                        __end_of_isLeapYear 1414                                    __Lrparam 0000  
                                _ANSELFbits 0EB4                                  _T0CON0bits 0FD5  
                                _T0CON1bits 0FD6                             ___lwdiv@divisor 0007  
                           ___lwdiv@counter 000B  calculateDayOfDSTStart@dayOfYearForDSTStart 0027  
                   LEDarray_disp_bin@number 0005               main@bkwd_daylight_savings_day 0039  
                                  isa$xinst 0000                                    int$flags 0049  
                                  main@leap 0035                                    main@hour 0043  
                                  main@year 003F                                  _INTCONbits 0FF2  
                    _calculateDayOfDSTStart 101E                calculateDayOfDSTEnd@leapYear 001B  
                                  intlevel1 0000                  calculateDayOfDSTStart@year 000F  
                                  intlevel2 0000                                _DAC1CON0bits 0EC6  
                              _DAC1CON1bits 0EC7                            ___lwmod@dividend 0005  
     calculateDayOfDSTEnd@daysBeforeOctober 001D                             ___lwmod@divisor 0007  
                           ___lwmod@counter 0009                              isLeapYear@year 000A  
                   calc_max_PPM@loopCounter 0045  
